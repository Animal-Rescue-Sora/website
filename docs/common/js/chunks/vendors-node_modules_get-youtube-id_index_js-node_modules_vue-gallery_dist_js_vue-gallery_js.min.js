(globalThis["webpackChunkaeon_pet"] = globalThis["webpackChunkaeon_pet"] || []).push([["vendors-node_modules_get-youtube-id_index_js-node_modules_vue-gallery_dist_js_vue-gallery_js"],{

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery-fullscreen.js":
/*!***********************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery-fullscreen.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * blueimp Gallery Fullscreen JS
 * https://github.com/blueimp/Gallery
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */

/* global define */

;(function (factory) {
  'use strict'
  if (true) {
    // Register as an anonymous AMD module:
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ "./node_modules/blueimp-gallery/js/blueimp-helper.js"), __webpack_require__(/*! ./blueimp-gallery */ "./node_modules/blueimp-gallery/js/blueimp-gallery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
})(function ($, Gallery) {
  'use strict'

  var galleryPrototype = Gallery.prototype

  $.extend(galleryPrototype.options, {
    // Defines if the gallery should open in fullscreen mode:
    fullScreen: false
  })

  var initialize = galleryPrototype.initialize
  var close = galleryPrototype.close

  $.extend(galleryPrototype, {
    getFullScreenElement: function () {
      return (
        document.fullscreenElement ||
        document.webkitFullscreenElement ||
        document.mozFullScreenElement ||
        document.msFullscreenElement
      )
    },

    requestFullScreen: function (element) {
      if (element.requestFullscreen) {
        element.requestFullscreen()
      } else if (element.webkitRequestFullscreen) {
        element.webkitRequestFullscreen()
      } else if (element.mozRequestFullScreen) {
        element.mozRequestFullScreen()
      } else if (element.msRequestFullscreen) {
        element.msRequestFullscreen()
      }
    },

    exitFullScreen: function () {
      if (document.exitFullscreen) {
        document.exitFullscreen()
      } else if (document.webkitCancelFullScreen) {
        document.webkitCancelFullScreen()
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen()
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen()
      }
    },

    initialize: function () {
      initialize.call(this)
      if (this.options.fullScreen && !this.getFullScreenElement()) {
        this.requestFullScreen(this.container[0])
      }
    },

    close: function () {
      if (this.getFullScreenElement() === this.container[0]) {
        this.exitFullScreen()
      }
      close.call(this)
    }
  })

  return Gallery
})


/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery-video.js":
/*!******************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery-video.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * blueimp Gallery Video Factory JS
 * https://github.com/blueimp/Gallery
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */

/* global define */

;(function (factory) {
  'use strict'
  if (true) {
    // Register as an anonymous AMD module:
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ "./node_modules/blueimp-gallery/js/blueimp-helper.js"), __webpack_require__(/*! ./blueimp-gallery */ "./node_modules/blueimp-gallery/js/blueimp-gallery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
})(function ($, Gallery) {
  'use strict'

  var galleryPrototype = Gallery.prototype

  $.extend(galleryPrototype.options, {
    // The class for video content elements:
    videoContentClass: 'video-content',
    // The class for video when it is loading:
    videoLoadingClass: 'video-loading',
    // The class for video when it is playing:
    videoPlayingClass: 'video-playing',
    // The list object property (or data attribute) for the video poster URL:
    videoPosterProperty: 'poster',
    // The list object property (or data attribute) for the video sources array:
    videoSourcesProperty: 'sources'
  })

  var handleSlide = galleryPrototype.handleSlide

  $.extend(galleryPrototype, {
    handleSlide: function (index) {
      handleSlide.call(this, index)
      if (this.playingVideo) {
        this.playingVideo.pause()
      }
    },

    videoFactory: function (obj, callback, videoInterface) {
      var that = this
      var options = this.options
      var videoContainerNode = this.elementPrototype.cloneNode(false)
      var videoContainer = $(videoContainerNode)
      var errorArgs = [
        {
          type: 'error',
          target: videoContainerNode
        }
      ]
      var video = videoInterface || document.createElement('video')
      var url = this.getItemProperty(obj, options.urlProperty)
      var type = this.getItemProperty(obj, options.typeProperty)
      var title = this.getItemProperty(obj, options.titleProperty)
      var altText =
        this.getItemProperty(obj, this.options.altTextProperty) || title
      var posterUrl = this.getItemProperty(obj, options.videoPosterProperty)
      var posterImage
      var sources = this.getItemProperty(obj, options.videoSourcesProperty)
      var source
      var playMediaControl
      var isLoading
      var hasControls
      videoContainer.addClass(options.videoContentClass)
      if (title) {
        videoContainerNode.title = title
      }
      if (video.canPlayType) {
        if (url && type && video.canPlayType(type)) {
          video.src = url
        } else if (sources) {
          while (sources.length) {
            source = sources.shift()
            url = this.getItemProperty(source, options.urlProperty)
            type = this.getItemProperty(source, options.typeProperty)
            if (url && type && video.canPlayType(type)) {
              video.src = url
              break
            }
          }
        }
      }
      if (posterUrl) {
        video.poster = posterUrl
        posterImage = this.imagePrototype.cloneNode(false)
        $(posterImage).addClass(options.toggleClass)
        posterImage.src = posterUrl
        posterImage.draggable = false
        posterImage.alt = altText
        videoContainerNode.appendChild(posterImage)
      }
      playMediaControl = document.createElement('a')
      playMediaControl.setAttribute('target', '_blank')
      if (!videoInterface) {
        playMediaControl.setAttribute('download', title)
      }
      playMediaControl.href = url
      if (video.src) {
        video.controls = true
        ;(videoInterface || $(video))
          .on('error', function () {
            that.setTimeout(callback, errorArgs)
          })
          .on('pause', function () {
            if (video.seeking) return
            isLoading = false
            videoContainer
              .removeClass(that.options.videoLoadingClass)
              .removeClass(that.options.videoPlayingClass)
            if (hasControls) {
              that.container.addClass(that.options.controlsClass)
            }
            delete that.playingVideo
            if (that.interval) {
              that.play()
            }
          })
          .on('playing', function () {
            isLoading = false
            videoContainer
              .removeClass(that.options.videoLoadingClass)
              .addClass(that.options.videoPlayingClass)
            if (that.container.hasClass(that.options.controlsClass)) {
              hasControls = true
              that.container.removeClass(that.options.controlsClass)
            } else {
              hasControls = false
            }
          })
          .on('play', function () {
            window.clearTimeout(that.timeout)
            isLoading = true
            videoContainer.addClass(that.options.videoLoadingClass)
            that.playingVideo = video
          })
        $(playMediaControl).on('click', function (event) {
          that.preventDefault(event)
          if (isLoading) {
            video.pause()
          } else {
            video.play()
          }
        })
        videoContainerNode.appendChild(
          (videoInterface && videoInterface.element) || video
        )
      }
      videoContainerNode.appendChild(playMediaControl)
      this.setTimeout(callback, [
        {
          type: 'load',
          target: videoContainerNode
        }
      ])
      return videoContainerNode
    }
  })

  return Gallery
})


/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery-youtube.js":
/*!********************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery-youtube.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * blueimp Gallery YouTube Video Factory JS
 * https://github.com/blueimp/Gallery
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */

/* global define, YT */

;(function (factory) {
  'use strict'
  if (true) {
    // Register as an anonymous AMD module:
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ "./node_modules/blueimp-gallery/js/blueimp-helper.js"), __webpack_require__(/*! ./blueimp-gallery-video */ "./node_modules/blueimp-gallery/js/blueimp-gallery-video.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
})(function ($, Gallery) {
  'use strict'

  if (!window.postMessage) {
    return Gallery
  }

  var galleryPrototype = Gallery.prototype

  $.extend(galleryPrototype.options, {
    // The list object property (or data attribute) with the YouTube video id:
    youTubeVideoIdProperty: 'youtube',
    // Optional object with parameters passed to the YouTube video player:
    // https://developers.google.com/youtube/player_parameters
    youTubePlayerVars: {
      wmode: 'transparent'
    },
    // Require a click on the native YouTube player for the initial playback:
    youTubeClickToPlay: true
  })

  var textFactory =
    galleryPrototype.textFactory || galleryPrototype.imageFactory
  var YouTubePlayer = function (videoId, playerVars, clickToPlay) {
    this.videoId = videoId
    this.playerVars = playerVars
    this.clickToPlay = clickToPlay
    this.element = document.createElement('div')
    this.listeners = {}
  }

  $.extend(YouTubePlayer.prototype, {
    canPlayType: function () {
      return true
    },

    on: function (type, func) {
      this.listeners[type] = func
      return this
    },

    loadAPI: function () {
      var that = this
      var onYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady
      var apiUrl = '//www.youtube.com/iframe_api'
      var scriptTags = document.getElementsByTagName('script')
      var i = scriptTags.length
      var scriptTag
      window.onYouTubeIframeAPIReady = function () {
        if (onYouTubeIframeAPIReady) {
          onYouTubeIframeAPIReady.apply(this)
        }
        if (that.playOnReady) {
          that.play()
        }
      }
      while (i) {
        i -= 1
        if (scriptTags[i].src === apiUrl) {
          return
        }
      }
      scriptTag = document.createElement('script')
      scriptTag.src = apiUrl
      scriptTags[0].parentNode.insertBefore(scriptTag, scriptTags[0])
    },

    onReady: function () {
      this.ready = true
      if (this.playOnReady) {
        this.play()
      }
    },

    onPlaying: function () {
      if (this.playStatus < 2) {
        this.listeners.playing()
        this.playStatus = 2
      }
    },

    onPause: function () {
      galleryPrototype.setTimeout.call(this, this.checkSeek, null, 2000)
    },

    checkSeek: function () {
      if (
        this.stateChange === YT.PlayerState.PAUSED ||
        this.stateChange === YT.PlayerState.ENDED
      ) {
        // check if current state change is actually paused
        this.listeners.pause()
        delete this.playStatus
      }
    },

    onStateChange: function (event) {
      switch (event.data) {
        case YT.PlayerState.PLAYING:
          this.hasPlayed = true
          this.onPlaying()
          break
        case YT.PlayerState.PAUSED:
        case YT.PlayerState.ENDED:
          this.onPause()
          break
      }
      // Save most recent state change to this.stateChange
      this.stateChange = event.data
    },

    onError: function (event) {
      this.listeners.error(event)
    },

    play: function () {
      var that = this
      if (!this.playStatus) {
        this.listeners.play()
        this.playStatus = 1
      }
      if (this.ready) {
        if (
          !this.hasPlayed &&
          (this.clickToPlay ||
            (window.navigator &&
              /iP(hone|od|ad)/.test(window.navigator.platform)))
        ) {
          // Manually trigger the playing callback if clickToPlay
          // is enabled and to workaround a limitation in iOS,
          // which requires synchronous user interaction to start
          // the video playback:
          this.onPlaying()
        } else {
          this.player.playVideo()
        }
      } else {
        this.playOnReady = true
        if (!(window.YT && YT.Player)) {
          this.loadAPI()
        } else if (!this.player) {
          this.player = new YT.Player(this.element, {
            videoId: this.videoId,
            playerVars: this.playerVars,
            events: {
              onReady: function () {
                that.onReady()
              },
              onStateChange: function (event) {
                that.onStateChange(event)
              },
              onError: function (event) {
                that.onError(event)
              }
            }
          })
        }
      }
    },

    pause: function () {
      if (this.ready) {
        this.player.pauseVideo()
      } else if (this.playStatus) {
        delete this.playOnReady
        this.listeners.pause()
        delete this.playStatus
      }
    }
  })

  $.extend(galleryPrototype, {
    YouTubePlayer: YouTubePlayer,

    textFactory: function (obj, callback) {
      var options = this.options
      var videoId = this.getItemProperty(obj, options.youTubeVideoIdProperty)
      if (videoId) {
        if (this.getItemProperty(obj, options.urlProperty) === undefined) {
          obj[options.urlProperty] = '//www.youtube.com/watch?v=' + videoId
        }
        if (
          this.getItemProperty(obj, options.videoPosterProperty) === undefined
        ) {
          obj[options.videoPosterProperty] =
            '//img.youtube.com/vi/' + videoId + '/maxresdefault.jpg'
        }
        return this.videoFactory(
          obj,
          callback,
          new YouTubePlayer(
            videoId,
            options.youTubePlayerVars,
            options.youTubeClickToPlay
          )
        )
      }
      return textFactory.call(this, obj, callback)
    }
  })

  return Gallery
})


/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery.js":
/*!************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * blueimp Gallery JS
 * https://github.com/blueimp/Gallery
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Swipe implementation based on
 * https://github.com/bradbirdsall/Swipe
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */

/* global define, DocumentTouch */

/* eslint-disable no-param-reassign */

;(function (factory) {
  'use strict'
  if (true) {
    // Register as an anonymous AMD module:
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ "./node_modules/blueimp-gallery/js/blueimp-helper.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
})(function ($) {
  'use strict'

  /**
   * Gallery constructor
   *
   * @class
   * @param {Array|NodeList} list Gallery content
   * @param {object} [options] Gallery options
   * @returns {object} Gallery object
   */
  function Gallery(list, options) {
    if (document.body.style.maxHeight === undefined) {
      // document.body.style.maxHeight is undefined on IE6 and lower
      return null
    }
    if (!this || this.options !== Gallery.prototype.options) {
      // Called as function instead of as constructor,
      // so we simply return a new instance:
      return new Gallery(list, options)
    }
    if (!list || !list.length) {
      this.console.log(
        'blueimp Gallery: No or empty list provided as first argument.',
        list
      )
      return
    }
    this.list = list
    this.num = list.length
    this.initOptions(options)
    this.initialize()
  }

  $.extend(Gallery.prototype, {
    options: {
      // The Id, element or querySelector of the gallery widget:
      container: '#blueimp-gallery',
      // The tag name, Id, element or querySelector of the slides container:
      slidesContainer: 'div',
      // The tag name, Id, element or querySelector of the title element:
      titleElement: 'h3',
      // The class to add when the gallery is visible:
      displayClass: 'blueimp-gallery-display',
      // The class to add when the gallery controls are visible:
      controlsClass: 'blueimp-gallery-controls',
      // The class to add when the gallery only displays one element:
      singleClass: 'blueimp-gallery-single',
      // The class to add when the left edge has been reached:
      leftEdgeClass: 'blueimp-gallery-left',
      // The class to add when the right edge has been reached:
      rightEdgeClass: 'blueimp-gallery-right',
      // The class to add when the automatic slideshow is active:
      playingClass: 'blueimp-gallery-playing',
      // The class for all slides:
      slideClass: 'slide',
      // The slide class for loading elements:
      slideLoadingClass: 'slide-loading',
      // The slide class for elements that failed to load:
      slideErrorClass: 'slide-error',
      // The class for the content element loaded into each slide:
      slideContentClass: 'slide-content',
      // The class for the "toggle" control:
      toggleClass: 'toggle',
      // The class for the "prev" control:
      prevClass: 'prev',
      // The class for the "next" control:
      nextClass: 'next',
      // The class for the "close" control:
      closeClass: 'close',
      // The class for the "play-pause" toggle control:
      playPauseClass: 'play-pause',
      // The list object property (or data attribute) with the object type:
      typeProperty: 'type',
      // The list object property (or data attribute) with the object title:
      titleProperty: 'title',
      // The list object property (or data attribute) with the object alt text:
      altTextProperty: 'alt',
      // The list object property (or data attribute) with the object URL:
      urlProperty: 'href',
      // The list object property (or data attribute) with the object srcset URL(s):
      srcsetProperty: 'urlset',
      // The gallery listens for transitionend events before triggering the
      // opened and closed events, unless the following option is set to false:
      displayTransition: true,
      // Defines if the gallery slides are cleared from the gallery modal,
      // or reused for the next gallery initialization:
      clearSlides: true,
      // Defines if images should be stretched to fill the available space,
      // while maintaining their aspect ratio (will only be enabled for browsers
      // supporting background-size="contain", which excludes IE < 9).
      // Set to "cover", to make images cover all available space (requires
      // support for background-size="cover", which excludes IE < 9):
      stretchImages: false,
      // Toggle the controls on pressing the Return key:
      toggleControlsOnReturn: true,
      // Toggle the controls on slide click:
      toggleControlsOnSlideClick: true,
      // Toggle the automatic slideshow interval on pressing the Space key:
      toggleSlideshowOnSpace: true,
      // Navigate the gallery by pressing left and right on the keyboard:
      enableKeyboardNavigation: true,
      // Close the gallery on pressing the Esc key:
      closeOnEscape: true,
      // Close the gallery when clicking on an empty slide area:
      closeOnSlideClick: true,
      // Close the gallery by swiping up or down:
      closeOnSwipeUpOrDown: true,
      // Close the gallery when URL changes:
      closeOnHashChange: true,
      // Emulate touch events on mouse-pointer devices such as desktop browsers:
      emulateTouchEvents: true,
      // Stop touch events from bubbling up to ancestor elements of the Gallery:
      stopTouchEventsPropagation: false,
      // Hide the page scrollbars:
      hidePageScrollbars: true,
      // Stops any touches on the container from scrolling the page:
      disableScroll: true,
      // Carousel mode (shortcut for carousel specific options):
      carousel: false,
      // Allow continuous navigation, moving from last to first
      // and from first to last slide:
      continuous: true,
      // Remove elements outside of the preload range from the DOM:
      unloadElements: true,
      // Start with the automatic slideshow:
      startSlideshow: false,
      // Delay in milliseconds between slides for the automatic slideshow:
      slideshowInterval: 5000,
      // The direction the slides are moving: ltr=LeftToRight or rtl=RightToLeft
      slideshowDirection: 'ltr',
      // The starting index as integer.
      // Can also be an object of the given list,
      // or an equal object with the same url property:
      index: 0,
      // The number of elements to load around the current index:
      preloadRange: 2,
      // The transition duration between slide changes in milliseconds:
      transitionDuration: 300,
      // The transition duration for automatic slide changes, set to an integer
      // greater 0 to override the default transition duration:
      slideshowTransitionDuration: 500,
      // The event object for which the default action will be canceled
      // on Gallery initialization (e.g. the click event to open the Gallery):
      event: undefined,
      // Callback function executed when the Gallery is initialized.
      // Is called with the gallery instance as "this" object:
      onopen: undefined,
      // Callback function executed when the Gallery has been initialized
      // and the initialization transition has been completed.
      // Is called with the gallery instance as "this" object:
      onopened: undefined,
      // Callback function executed on slide change.
      // Is called with the gallery instance as "this" object and the
      // current index and slide as arguments:
      onslide: undefined,
      // Callback function executed after the slide change transition.
      // Is called with the gallery instance as "this" object and the
      // current index and slide as arguments:
      onslideend: undefined,
      // Callback function executed on slide content load.
      // Is called with the gallery instance as "this" object and the
      // slide index and slide element as arguments:
      onslidecomplete: undefined,
      // Callback function executed when the Gallery is about to be closed.
      // Is called with the gallery instance as "this" object:
      onclose: undefined,
      // Callback function executed when the Gallery has been closed
      // and the closing transition has been completed.
      // Is called with the gallery instance as "this" object:
      onclosed: undefined
    },

    carouselOptions: {
      hidePageScrollbars: false,
      toggleControlsOnReturn: false,
      toggleSlideshowOnSpace: false,
      enableKeyboardNavigation: false,
      closeOnEscape: false,
      closeOnSlideClick: false,
      closeOnSwipeUpOrDown: false,
      disableScroll: false,
      startSlideshow: true
    },

    console:
      window.console && typeof window.console.log === 'function'
        ? window.console
        : { log: function () {} },

    // Detect touch, transition, transform and background-size support:
    support: (function (element) {
      var support = {
        touch:
          window.ontouchstart !== undefined ||
          (window.DocumentTouch && document instanceof DocumentTouch)
      }
      var transitions = {
        webkitTransition: {
          end: 'webkitTransitionEnd',
          prefix: '-webkit-'
        },
        MozTransition: {
          end: 'transitionend',
          prefix: '-moz-'
        },
        OTransition: {
          end: 'otransitionend',
          prefix: '-o-'
        },
        transition: {
          end: 'transitionend',
          prefix: ''
        }
      }
      var prop
      for (prop in transitions) {
        if (
          Object.prototype.hasOwnProperty.call(transitions, prop) &&
          element.style[prop] !== undefined
        ) {
          support.transition = transitions[prop]
          support.transition.name = prop
          break
        }
      }
      /**
       * Tests browser support
       */
      function elementTests() {
        var transition = support.transition
        var prop
        var translateZ
        document.body.appendChild(element)
        if (transition) {
          prop = transition.name.slice(0, -9) + 'ransform'
          if (element.style[prop] !== undefined) {
            element.style[prop] = 'translateZ(0)'
            translateZ = window
              .getComputedStyle(element)
              .getPropertyValue(transition.prefix + 'transform')
            support.transform = {
              prefix: transition.prefix,
              name: prop,
              translate: true,
              translateZ: !!translateZ && translateZ !== 'none'
            }
          }
        }
        if (element.style.backgroundSize !== undefined) {
          support.backgroundSize = {}
          element.style.backgroundSize = 'contain'
          support.backgroundSize.contain =
            window
              .getComputedStyle(element)
              .getPropertyValue('background-size') === 'contain'
          element.style.backgroundSize = 'cover'
          support.backgroundSize.cover =
            window
              .getComputedStyle(element)
              .getPropertyValue('background-size') === 'cover'
        }
        document.body.removeChild(element)
      }
      if (document.body) {
        elementTests()
      } else {
        $(document).on('DOMContentLoaded', elementTests)
      }
      return support
      // Test element, has to be standard HTML and must not be hidden
      // for the CSS3 tests using window.getComputedStyle to be applicable:
    })(document.createElement('div')),

    requestAnimationFrame:
      window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame,

    cancelAnimationFrame:
      window.cancelAnimationFrame ||
      window.webkitCancelRequestAnimationFrame ||
      window.webkitCancelAnimationFrame ||
      window.mozCancelAnimationFrame,

    initialize: function () {
      this.initStartIndex()
      if (this.initWidget() === false) {
        return false
      }
      this.initEventListeners()
      // Load the slide at the given index:
      this.onslide(this.index)
      // Manually trigger the slideend event for the initial slide:
      this.ontransitionend()
      // Start the automatic slideshow if applicable:
      if (this.options.startSlideshow) {
        this.play()
      }
    },

    slide: function (to, duration) {
      window.clearTimeout(this.timeout)
      var index = this.index
      var direction
      var naturalDirection
      var diff
      if (index === to || this.num === 1) {
        return
      }
      if (!duration) {
        duration = this.options.transitionDuration
      }
      if (this.support.transform) {
        if (!this.options.continuous) {
          to = this.circle(to)
        }
        // 1: backward, -1: forward:
        direction = Math.abs(index - to) / (index - to)
        // Get the actual position of the slide:
        if (this.options.continuous) {
          naturalDirection = direction
          direction = -this.positions[this.circle(to)] / this.slideWidth
          // If going forward but to < index, use to = slides.length + to
          // If going backward but to > index, use to = -slides.length + to
          if (direction !== naturalDirection) {
            to = -direction * this.num + to
          }
        }
        diff = Math.abs(index - to) - 1
        // Move all the slides between index and to in the right direction:
        while (diff) {
          diff -= 1
          this.move(
            this.circle((to > index ? to : index) - diff - 1),
            this.slideWidth * direction,
            0
          )
        }
        to = this.circle(to)
        this.move(index, this.slideWidth * direction, duration)
        this.move(to, 0, duration)
        if (this.options.continuous) {
          this.move(
            this.circle(to - direction),
            -(this.slideWidth * direction),
            0
          )
        }
      } else {
        to = this.circle(to)
        this.animate(index * -this.slideWidth, to * -this.slideWidth, duration)
      }
      this.onslide(to)
    },

    getIndex: function () {
      return this.index
    },

    getNumber: function () {
      return this.num
    },

    prev: function () {
      if (this.options.continuous || this.index) {
        this.slide(this.index - 1)
      }
    },

    next: function () {
      if (this.options.continuous || this.index < this.num - 1) {
        this.slide(this.index + 1)
      }
    },

    play: function (time) {
      var that = this
      var nextIndex =
        this.index + (this.options.slideshowDirection === 'rtl' ? -1 : 1)
      window.clearTimeout(this.timeout)
      this.interval = time || this.options.slideshowInterval
      if (this.elements[this.index] > 1) {
        this.timeout = this.setTimeout(
          (!this.requestAnimationFrame && this.slide) ||
            function (to, duration) {
              that.animationFrameId = that.requestAnimationFrame.call(
                window,
                function () {
                  that.slide(to, duration)
                }
              )
            },
          [nextIndex, this.options.slideshowTransitionDuration],
          this.interval
        )
      }
      this.container.addClass(this.options.playingClass)
    },

    pause: function () {
      window.clearTimeout(this.timeout)
      this.interval = null
      if (this.cancelAnimationFrame) {
        this.cancelAnimationFrame.call(window, this.animationFrameId)
        this.animationFrameId = null
      }
      this.container.removeClass(this.options.playingClass)
    },

    add: function (list) {
      var i
      if (!list.concat) {
        // Make a real array out of the list to add:
        list = Array.prototype.slice.call(list)
      }
      if (!this.list.concat) {
        // Make a real array out of the Gallery list:
        this.list = Array.prototype.slice.call(this.list)
      }
      this.list = this.list.concat(list)
      this.num = this.list.length
      if (this.num > 2 && this.options.continuous === null) {
        this.options.continuous = true
        this.container.removeClass(this.options.leftEdgeClass)
      }
      this.container
        .removeClass(this.options.rightEdgeClass)
        .removeClass(this.options.singleClass)
      for (i = this.num - list.length; i < this.num; i += 1) {
        this.addSlide(i)
        this.positionSlide(i)
      }
      this.positions.length = this.num
      this.initSlides(true)
    },

    resetSlides: function () {
      this.slidesContainer.empty()
      this.unloadAllSlides()
      this.slides = []
    },

    handleClose: function () {
      var options = this.options
      this.destroyEventListeners()
      // Cancel the slideshow:
      this.pause()
      this.container[0].style.display = 'none'
      this.container
        .removeClass(options.displayClass)
        .removeClass(options.singleClass)
        .removeClass(options.leftEdgeClass)
        .removeClass(options.rightEdgeClass)
      if (options.hidePageScrollbars) {
        document.body.style.overflow = this.bodyOverflowStyle
      }
      if (this.options.clearSlides) {
        this.resetSlides()
      }
      if (this.options.onclosed) {
        this.options.onclosed.call(this)
      }
    },

    close: function () {
      var that = this
      /**
       * Close handler
       *
       * @param {event} event Close event
       */
      function closeHandler(event) {
        if (event.target === that.container[0]) {
          that.container.off(that.support.transition.end, closeHandler)
          that.handleClose()
        }
      }
      if (this.options.onclose) {
        this.options.onclose.call(this)
      }
      if (this.support.transition && this.options.displayTransition) {
        this.container.on(this.support.transition.end, closeHandler)
        this.container.removeClass(this.options.displayClass)
      } else {
        this.handleClose()
      }
    },

    circle: function (index) {
      // Always return a number inside of the slides index range:
      return (this.num + (index % this.num)) % this.num
    },

    move: function (index, dist, duration) {
      this.translateX(index, dist, duration)
      this.positions[index] = dist
    },

    translate: function (index, x, y, duration) {
      if (!this.slides[index]) return
      var style = this.slides[index].style
      var transition = this.support.transition
      var transform = this.support.transform
      style[transition.name + 'Duration'] = duration + 'ms'
      style[transform.name] =
        'translate(' +
        x +
        'px, ' +
        y +
        'px)' +
        (transform.translateZ ? ' translateZ(0)' : '')
    },

    translateX: function (index, x, duration) {
      this.translate(index, x, 0, duration)
    },

    translateY: function (index, y, duration) {
      this.translate(index, 0, y, duration)
    },

    animate: function (from, to, duration) {
      if (!duration) {
        this.slidesContainer[0].style.left = to + 'px'
        return
      }
      var that = this
      var start = new Date().getTime()
      var timer = window.setInterval(function () {
        var timeElap = new Date().getTime() - start
        if (timeElap > duration) {
          that.slidesContainer[0].style.left = to + 'px'
          that.ontransitionend()
          window.clearInterval(timer)
          return
        }
        that.slidesContainer[0].style.left =
          (to - from) * (Math.floor((timeElap / duration) * 100) / 100) +
          from +
          'px'
      }, 4)
    },

    preventDefault: function (event) {
      if (event.preventDefault) {
        event.preventDefault()
      } else {
        event.returnValue = false
      }
    },

    stopPropagation: function (event) {
      if (event.stopPropagation) {
        event.stopPropagation()
      } else {
        event.cancelBubble = true
      }
    },

    onresize: function () {
      this.initSlides(true)
    },

    onhashchange: function () {
      if (this.options.closeOnHashChange) {
        this.close()
      }
    },

    onmousedown: function (event) {
      // Trigger on clicks of the left mouse button only
      // and exclude video & audio elements:
      if (
        event.which &&
        event.which === 1 &&
        event.target.nodeName !== 'VIDEO' &&
        event.target.nodeName !== 'AUDIO'
      ) {
        // Preventing the default mousedown action is required
        // to make touch emulation work with Firefox:
        event.preventDefault()
        ;(event.originalEvent || event).touches = [
          {
            pageX: event.pageX,
            pageY: event.pageY
          }
        ]
        this.ontouchstart(event)
      }
    },

    onmousemove: function (event) {
      if (this.touchStart) {
        ;(event.originalEvent || event).touches = [
          {
            pageX: event.pageX,
            pageY: event.pageY
          }
        ]
        this.ontouchmove(event)
      }
    },

    onmouseup: function (event) {
      if (this.touchStart) {
        this.ontouchend(event)
        delete this.touchStart
      }
    },

    onmouseout: function (event) {
      if (this.touchStart) {
        var target = event.target
        var related = event.relatedTarget
        if (!related || (related !== target && !$.contains(target, related))) {
          this.onmouseup(event)
        }
      }
    },

    ontouchstart: function (event) {
      if (this.options.stopTouchEventsPropagation) {
        this.stopPropagation(event)
      }
      // jQuery doesn't copy touch event properties by default,
      // so we have to access the originalEvent object:
      var touch = (event.originalEvent || event).touches[0]
      this.touchStart = {
        // Remember the initial touch coordinates:
        x: touch.pageX,
        y: touch.pageY,
        // Store the time to determine touch duration:
        time: Date.now()
      }
      // Helper variable to detect scroll movement:
      this.isScrolling = undefined
      // Reset delta values:
      this.touchDelta = {}
    },

    ontouchmove: function (event) {
      if (this.options.stopTouchEventsPropagation) {
        this.stopPropagation(event)
      }
      // jQuery doesn't copy touch event properties by default,
      // so we have to access the originalEvent object:
      var touches = (event.originalEvent || event).touches
      var touch = touches[0]
      var scale = (event.originalEvent || event).scale
      var index = this.index
      var touchDeltaX
      var indices
      // Ensure this is a one touch swipe and not, e.g. a pinch:
      if (touches.length > 1 || (scale && scale !== 1)) {
        return
      }
      if (this.options.disableScroll) {
        event.preventDefault()
      }
      // Measure change in x and y coordinates:
      this.touchDelta = {
        x: touch.pageX - this.touchStart.x,
        y: touch.pageY - this.touchStart.y
      }
      touchDeltaX = this.touchDelta.x
      // Detect if this is a vertical scroll movement (run only once per touch):
      if (this.isScrolling === undefined) {
        this.isScrolling =
          this.isScrolling ||
          Math.abs(touchDeltaX) < Math.abs(this.touchDelta.y)
      }
      if (!this.isScrolling) {
        // Always prevent horizontal scroll:
        event.preventDefault()
        // Stop the slideshow:
        window.clearTimeout(this.timeout)
        if (this.options.continuous) {
          indices = [this.circle(index + 1), index, this.circle(index - 1)]
        } else {
          // Increase resistance if first slide and sliding left
          // or last slide and sliding right:
          this.touchDelta.x = touchDeltaX =
            touchDeltaX /
            ((!index && touchDeltaX > 0) ||
            (index === this.num - 1 && touchDeltaX < 0)
              ? Math.abs(touchDeltaX) / this.slideWidth + 1
              : 1)
          indices = [index]
          if (index) {
            indices.push(index - 1)
          }
          if (index < this.num - 1) {
            indices.unshift(index + 1)
          }
        }
        while (indices.length) {
          index = indices.pop()
          this.translateX(index, touchDeltaX + this.positions[index], 0)
        }
      } else if (!this.options.carousel) {
        this.translateY(index, this.touchDelta.y + this.positions[index], 0)
      }
    },

    ontouchend: function (event) {
      if (this.options.stopTouchEventsPropagation) {
        this.stopPropagation(event)
      }
      var index = this.index
      var absTouchDeltaX = Math.abs(this.touchDelta.x)
      var slideWidth = this.slideWidth
      var duration = Math.ceil(
        (this.options.transitionDuration * (1 - absTouchDeltaX / slideWidth)) /
          2
      )
      // Determine if slide attempt triggers next/prev slide:
      var isValidSlide = absTouchDeltaX > 20
      // Determine if slide attempt is past start or end:
      var isPastBounds =
        (!index && this.touchDelta.x > 0) ||
        (index === this.num - 1 && this.touchDelta.x < 0)
      var isValidClose =
        !isValidSlide &&
        this.options.closeOnSwipeUpOrDown &&
        Math.abs(this.touchDelta.y) > 20
      var direction
      var indexForward
      var indexBackward
      var distanceForward
      var distanceBackward
      if (this.options.continuous) {
        isPastBounds = false
      }
      // Determine direction of swipe (true: right, false: left):
      direction = this.touchDelta.x < 0 ? -1 : 1
      if (!this.isScrolling) {
        if (isValidSlide && !isPastBounds) {
          indexForward = index + direction
          indexBackward = index - direction
          distanceForward = slideWidth * direction
          distanceBackward = -slideWidth * direction
          if (this.options.continuous) {
            this.move(this.circle(indexForward), distanceForward, 0)
            this.move(this.circle(index - 2 * direction), distanceBackward, 0)
          } else if (indexForward >= 0 && indexForward < this.num) {
            this.move(indexForward, distanceForward, 0)
          }
          this.move(index, this.positions[index] + distanceForward, duration)
          this.move(
            this.circle(indexBackward),
            this.positions[this.circle(indexBackward)] + distanceForward,
            duration
          )
          index = this.circle(indexBackward)
          this.onslide(index)
        } else {
          // Move back into position
          if (this.options.continuous) {
            this.move(this.circle(index - 1), -slideWidth, duration)
            this.move(index, 0, duration)
            this.move(this.circle(index + 1), slideWidth, duration)
          } else {
            if (index) {
              this.move(index - 1, -slideWidth, duration)
            }
            this.move(index, 0, duration)
            if (index < this.num - 1) {
              this.move(index + 1, slideWidth, duration)
            }
          }
        }
      } else {
        if (isValidClose) {
          this.close()
        } else {
          // Move back into position
          this.translateY(index, 0, duration)
        }
      }
    },

    ontouchcancel: function (event) {
      if (this.touchStart) {
        this.ontouchend(event)
        delete this.touchStart
      }
    },

    ontransitionend: function (event) {
      var slide = this.slides[this.index]
      if (!event || slide === event.target) {
        if (this.interval) {
          this.play()
        }
        this.setTimeout(this.options.onslideend, [this.index, slide])
      }
    },

    oncomplete: function (event) {
      var target = event.target || event.srcElement
      var parent = target && target.parentNode
      var index
      if (!target || !parent) {
        return
      }
      index = this.getNodeIndex(parent)
      $(parent).removeClass(this.options.slideLoadingClass)
      if (event.type === 'error') {
        $(parent).addClass(this.options.slideErrorClass)
        this.elements[index] = 3 // Fail
      } else {
        this.elements[index] = 2 // Done
      }
      // Fix for IE7's lack of support for percentage max-height:
      if (target.clientHeight > this.container[0].clientHeight) {
        target.style.maxHeight = this.container[0].clientHeight
      }
      if (this.interval && this.slides[this.index] === parent) {
        this.play()
      }
      this.setTimeout(this.options.onslidecomplete, [index, parent])
    },

    onload: function (event) {
      this.oncomplete(event)
    },

    onerror: function (event) {
      this.oncomplete(event)
    },

    onkeydown: function (event) {
      switch (event.which || event.keyCode) {
        case 13: // Return
          if (this.options.toggleControlsOnReturn) {
            this.preventDefault(event)
            this.toggleControls()
          }
          break
        case 27: // Esc
          if (this.options.closeOnEscape) {
            this.close()
            // prevent Esc from closing other things
            event.stopImmediatePropagation()
          }
          break
        case 32: // Space
          if (this.options.toggleSlideshowOnSpace) {
            this.preventDefault(event)
            this.toggleSlideshow()
          }
          break
        case 37: // Left
          if (this.options.enableKeyboardNavigation) {
            this.preventDefault(event)
            this.prev()
          }
          break
        case 39: // Right
          if (this.options.enableKeyboardNavigation) {
            this.preventDefault(event)
            this.next()
          }
          break
      }
    },

    handleClick: function (event) {
      var options = this.options
      var target = event.target || event.srcElement
      var parent = target.parentNode
      /**
       * Checks if the target from the close has the given class
       *
       * @param {string} className Class name
       * @returns {boolean} Returns true if the target has the class name
       */
      function isTarget(className) {
        return $(target).hasClass(className) || $(parent).hasClass(className)
      }
      if (isTarget(options.toggleClass)) {
        // Click on "toggle" control
        this.preventDefault(event)
        this.toggleControls()
      } else if (isTarget(options.prevClass)) {
        // Click on "prev" control
        this.preventDefault(event)
        this.prev()
      } else if (isTarget(options.nextClass)) {
        // Click on "next" control
        this.preventDefault(event)
        this.next()
      } else if (isTarget(options.closeClass)) {
        // Click on "close" control
        this.preventDefault(event)
        this.close()
      } else if (isTarget(options.playPauseClass)) {
        // Click on "play-pause" control
        this.preventDefault(event)
        this.toggleSlideshow()
      } else if (parent === this.slidesContainer[0]) {
        // Click on slide background
        if (options.closeOnSlideClick) {
          this.preventDefault(event)
          this.close()
        } else if (options.toggleControlsOnSlideClick) {
          this.preventDefault(event)
          this.toggleControls()
        }
      } else if (
        parent.parentNode &&
        parent.parentNode === this.slidesContainer[0]
      ) {
        // Click on displayed element
        if (options.toggleControlsOnSlideClick) {
          this.preventDefault(event)
          this.toggleControls()
        }
      }
    },

    onclick: function (event) {
      if (
        this.options.emulateTouchEvents &&
        this.touchDelta &&
        (Math.abs(this.touchDelta.x) > 20 || Math.abs(this.touchDelta.y) > 20)
      ) {
        delete this.touchDelta
        return
      }
      return this.handleClick(event)
    },

    updateEdgeClasses: function (index) {
      if (!index) {
        this.container.addClass(this.options.leftEdgeClass)
      } else {
        this.container.removeClass(this.options.leftEdgeClass)
      }
      if (index === this.num - 1) {
        this.container.addClass(this.options.rightEdgeClass)
      } else {
        this.container.removeClass(this.options.rightEdgeClass)
      }
    },

    handleSlide: function (index) {
      if (!this.options.continuous) {
        this.updateEdgeClasses(index)
      }
      this.loadElements(index)
      if (this.options.unloadElements) {
        this.unloadElements(index)
      }
      this.setTitle(index)
    },

    onslide: function (index) {
      this.index = index
      this.handleSlide(index)
      this.setTimeout(this.options.onslide, [index, this.slides[index]])
    },

    setTitle: function (index) {
      var firstChild = this.slides[index].firstChild
      var text = firstChild.title || firstChild.alt
      var titleElement = this.titleElement
      if (titleElement.length) {
        this.titleElement.empty()
        if (text) {
          titleElement[0].appendChild(document.createTextNode(text))
        }
      }
    },

    setTimeout: function (func, args, wait) {
      var that = this
      return (
        func &&
        window.setTimeout(function () {
          func.apply(that, args || [])
        }, wait || 0)
      )
    },

    imageFactory: function (obj, callback) {
      var that = this
      var img = this.imagePrototype.cloneNode(false)
      var url = obj
      var backgroundSize = this.options.stretchImages
      var called
      var element
      var title
      var altText
      /**
       * Wraps the callback function for the load/error event
       *
       * @param {event} event load/error event
       * @returns {number} timeout ID
       */
      function callbackWrapper(event) {
        if (!called) {
          event = {
            type: event.type,
            target: element
          }
          if (!element.parentNode) {
            // Fix for IE7 firing the load event for
            // cached images before the element could
            // be added to the DOM:
            return that.setTimeout(callbackWrapper, [event])
          }
          called = true
          $(img).off('load error', callbackWrapper)
          if (backgroundSize) {
            if (event.type === 'load') {
              element.style.background = 'url("' + url + '") center no-repeat'
              element.style.backgroundSize = backgroundSize
            }
          }
          callback(event)
        }
      }
      if (typeof url !== 'string') {
        url = this.getItemProperty(obj, this.options.urlProperty)
        title = this.getItemProperty(obj, this.options.titleProperty)
        altText =
          this.getItemProperty(obj, this.options.altTextProperty) || title
      }
      if (backgroundSize === true) {
        backgroundSize = 'contain'
      }
      backgroundSize =
        this.support.backgroundSize &&
        this.support.backgroundSize[backgroundSize] &&
        backgroundSize
      if (backgroundSize) {
        element = this.elementPrototype.cloneNode(false)
      } else {
        element = img
        img.draggable = false
      }
      if (title) {
        element.title = title
      }
      if (altText) {
        element.alt = altText
      }
      $(img).on('load error', callbackWrapper)
      img.src = url
      return element
    },

    createElement: function (obj, callback) {
      var type = obj && this.getItemProperty(obj, this.options.typeProperty)
      var factory =
        (type && this[type.split('/')[0] + 'Factory']) || this.imageFactory
      var element = obj && factory.call(this, obj, callback)
      var srcset = this.getItemProperty(obj, this.options.srcsetProperty)
      if (!element) {
        element = this.elementPrototype.cloneNode(false)
        this.setTimeout(callback, [
          {
            type: 'error',
            target: element
          }
        ])
      }
      if (srcset) {
        element.setAttribute('srcset', srcset)
      }
      $(element).addClass(this.options.slideContentClass)
      return element
    },

    loadElement: function (index) {
      if (!this.elements[index]) {
        if (this.slides[index].firstChild) {
          this.elements[index] = $(this.slides[index]).hasClass(
            this.options.slideErrorClass
          )
            ? 3
            : 2
        } else {
          this.elements[index] = 1 // Loading
          $(this.slides[index]).addClass(this.options.slideLoadingClass)
          this.slides[index].appendChild(
            this.createElement(this.list[index], this.proxyListener)
          )
        }
      }
    },

    loadElements: function (index) {
      var limit = Math.min(this.num, this.options.preloadRange * 2 + 1)
      var j = index
      var i
      for (i = 0; i < limit; i += 1) {
        // First load the current slide element (0),
        // then the next one (+1),
        // then the previous one (-2),
        // then the next after next (+2), etc.:
        j += i * (i % 2 === 0 ? -1 : 1)
        // Connect the ends of the list to load slide elements for
        // continuous navigation:
        j = this.circle(j)
        this.loadElement(j)
      }
    },

    unloadElements: function (index) {
      var i, diff
      for (i in this.elements) {
        if (Object.prototype.hasOwnProperty.call(this.elements, i)) {
          diff = Math.abs(index - i)
          if (
            diff > this.options.preloadRange &&
            diff + this.options.preloadRange < this.num
          ) {
            this.unloadSlide(i)
            delete this.elements[i]
          }
        }
      }
    },

    addSlide: function (index) {
      var slide = this.slidePrototype.cloneNode(false)
      slide.setAttribute('data-index', index)
      this.slidesContainer[0].appendChild(slide)
      this.slides.push(slide)
    },

    positionSlide: function (index) {
      var slide = this.slides[index]
      slide.style.width = this.slideWidth + 'px'
      if (this.support.transform) {
        slide.style.left = index * -this.slideWidth + 'px'
        this.move(
          index,
          this.index > index
            ? -this.slideWidth
            : this.index < index
            ? this.slideWidth
            : 0,
          0
        )
      }
    },

    initSlides: function (reload) {
      var clearSlides, i
      if (!reload) {
        this.positions = []
        this.positions.length = this.num
        this.elements = {}
        this.imagePrototype = document.createElement('img')
        this.elementPrototype = document.createElement('div')
        this.slidePrototype = document.createElement('div')
        $(this.slidePrototype).addClass(this.options.slideClass)
        this.slides = this.slidesContainer[0].children
        clearSlides =
          this.options.clearSlides || this.slides.length !== this.num
      }
      this.slideWidth = this.container[0].clientWidth
      this.slideHeight = this.container[0].clientHeight
      this.slidesContainer[0].style.width = this.num * this.slideWidth + 'px'
      if (clearSlides) {
        this.resetSlides()
      }
      for (i = 0; i < this.num; i += 1) {
        if (clearSlides) {
          this.addSlide(i)
        }
        this.positionSlide(i)
      }
      // Reposition the slides before and after the given index:
      if (this.options.continuous && this.support.transform) {
        this.move(this.circle(this.index - 1), -this.slideWidth, 0)
        this.move(this.circle(this.index + 1), this.slideWidth, 0)
      }
      if (!this.support.transform) {
        this.slidesContainer[0].style.left =
          this.index * -this.slideWidth + 'px'
      }
    },

    unloadSlide: function (index) {
      var slide, firstChild
      slide = this.slides[index]
      firstChild = slide.firstChild
      if (firstChild !== null) {
        slide.removeChild(firstChild)
      }
    },

    unloadAllSlides: function () {
      var i, len
      for (i = 0, len = this.slides.length; i < len; i++) {
        this.unloadSlide(i)
      }
    },

    toggleControls: function () {
      var controlsClass = this.options.controlsClass
      if (this.container.hasClass(controlsClass)) {
        this.container.removeClass(controlsClass)
      } else {
        this.container.addClass(controlsClass)
      }
    },

    toggleSlideshow: function () {
      if (!this.interval) {
        this.play()
      } else {
        this.pause()
      }
    },

    getNodeIndex: function (element) {
      return parseInt(element.getAttribute('data-index'), 10)
    },

    getNestedProperty: function (obj, property) {
      property.replace(
        // Matches native JavaScript notation in a String,
        // e.g. '["doubleQuoteProp"].dotProp[2]'
        // eslint-disable-next-line no-useless-escape
        /\[(?:'([^']+)'|"([^"]+)"|(\d+))\]|(?:(?:^|\.)([^\.\[]+))/g,
        function (str, singleQuoteProp, doubleQuoteProp, arrayIndex, dotProp) {
          var prop =
            dotProp ||
            singleQuoteProp ||
            doubleQuoteProp ||
            (arrayIndex && parseInt(arrayIndex, 10))
          if (str && obj) {
            obj = obj[prop]
          }
        }
      )
      return obj
    },

    getDataProperty: function (obj, property) {
      var key
      var prop
      if (obj.dataset) {
        key = property.replace(/-([a-z])/g, function (_, b) {
          return b.toUpperCase()
        })
        prop = obj.dataset[key]
      } else if (obj.getAttribute) {
        prop = obj.getAttribute(
          'data-' + property.replace(/([A-Z])/g, '-$1').toLowerCase()
        )
      }
      if (typeof prop === 'string') {
        // eslint-disable-next-line no-useless-escape
        if (
          /^(true|false|null|-?\d+(\.\d+)?|\{[\s\S]*\}|\[[\s\S]*\])$/.test(prop)
        ) {
          try {
            return $.parseJSON(prop)
          } catch (ignore) {
            // ignore JSON parsing errors
          }
        }
        return prop
      }
    },

    getItemProperty: function (obj, property) {
      var prop = this.getDataProperty(obj, property)
      if (prop === undefined) {
        prop = obj[property]
      }
      if (prop === undefined) {
        prop = this.getNestedProperty(obj, property)
      }
      return prop
    },

    initStartIndex: function () {
      var index = this.options.index
      var urlProperty = this.options.urlProperty
      var i
      // Check if the index is given as a list object:
      if (index && typeof index !== 'number') {
        for (i = 0; i < this.num; i += 1) {
          if (
            this.list[i] === index ||
            this.getItemProperty(this.list[i], urlProperty) ===
              this.getItemProperty(index, urlProperty)
          ) {
            index = i
            break
          }
        }
      }
      // Make sure the index is in the list range:
      this.index = this.circle(parseInt(index, 10) || 0)
    },

    initEventListeners: function () {
      var that = this
      var slidesContainer = this.slidesContainer
      /**
       * Proxy listener
       *
       * @param {event} event original event
       */
      function proxyListener(event) {
        var type =
          that.support.transition && that.support.transition.end === event.type
            ? 'transitionend'
            : event.type
        that['on' + type](event)
      }
      $(window).on('resize', proxyListener)
      $(window).on('hashchange', proxyListener)
      $(document.body).on('keydown', proxyListener)
      this.container.on('click', proxyListener)
      if (this.support.touch) {
        slidesContainer.on(
          'touchstart touchmove touchend touchcancel',
          proxyListener
        )
      } else if (this.options.emulateTouchEvents && this.support.transition) {
        slidesContainer.on(
          'mousedown mousemove mouseup mouseout',
          proxyListener
        )
      }
      if (this.support.transition) {
        slidesContainer.on(this.support.transition.end, proxyListener)
      }
      this.proxyListener = proxyListener
    },

    destroyEventListeners: function () {
      var slidesContainer = this.slidesContainer
      var proxyListener = this.proxyListener
      $(window).off('resize', proxyListener)
      $(document.body).off('keydown', proxyListener)
      this.container.off('click', proxyListener)
      if (this.support.touch) {
        slidesContainer.off(
          'touchstart touchmove touchend touchcancel',
          proxyListener
        )
      } else if (this.options.emulateTouchEvents && this.support.transition) {
        slidesContainer.off(
          'mousedown mousemove mouseup mouseout',
          proxyListener
        )
      }
      if (this.support.transition) {
        slidesContainer.off(this.support.transition.end, proxyListener)
      }
    },

    handleOpen: function () {
      if (this.options.onopened) {
        this.options.onopened.call(this)
      }
    },

    initWidget: function () {
      var that = this
      /**
       * Open handler
       *
       * @param {event} event Gallery open event
       */
      function openHandler(event) {
        if (event.target === that.container[0]) {
          that.container.off(that.support.transition.end, openHandler)
          that.handleOpen()
        }
      }
      this.container = $(this.options.container)
      if (!this.container.length) {
        this.console.log(
          'blueimp Gallery: Widget container not found.',
          this.options.container
        )
        return false
      }
      this.slidesContainer = this.container
        .find(this.options.slidesContainer)
        .first()
      if (!this.slidesContainer.length) {
        this.console.log(
          'blueimp Gallery: Slides container not found.',
          this.options.slidesContainer
        )
        return false
      }
      this.titleElement = this.container.find(this.options.titleElement).first()
      if (this.num === 1) {
        this.container.addClass(this.options.singleClass)
      }
      if (this.options.onopen) {
        this.options.onopen.call(this)
      }
      if (this.support.transition && this.options.displayTransition) {
        this.container.on(this.support.transition.end, openHandler)
      } else {
        this.handleOpen()
      }
      if (this.options.hidePageScrollbars) {
        // Hide the page scrollbars:
        this.bodyOverflowStyle = document.body.style.overflow
        document.body.style.overflow = 'hidden'
      }
      this.container[0].style.display = 'block'
      this.initSlides()
      this.container.addClass(this.options.displayClass)
    },

    initOptions: function (options) {
      // Create a copy of the prototype options:
      this.options = $.extend({}, this.options)
      // Check if carousel mode is enabled:
      if (
        (options && options.carousel) ||
        (this.options.carousel && (!options || options.carousel !== false))
      ) {
        $.extend(this.options, this.carouselOptions)
      }
      // Override any given options:
      $.extend(this.options, options)
      if (this.num < 3) {
        // 1 or 2 slides cannot be displayed continuous,
        // remember the original option by setting to null instead of false:
        this.options.continuous = this.options.continuous ? null : false
      }
      if (!this.support.transition) {
        this.options.emulateTouchEvents = false
      }
      if (this.options.event) {
        this.preventDefault(this.options.event)
      }
    }
  })

  return Gallery
})


/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-helper.js":
/*!***********************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-helper.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
 * blueimp helper JS
 * https://github.com/blueimp/Gallery
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */

/* global define */

/* eslint-disable no-param-reassign */

;(function () {
  'use strict'

  /**
   * Object.assign polyfill
   *
   * @param {object} obj1 First object
   * @param {object} obj2 Second object
   * @returns {object} Merged object
   */
  function extend(obj1, obj2) {
    var prop
    for (prop in obj2) {
      if (Object.prototype.hasOwnProperty.call(obj2, prop)) {
        obj1[prop] = obj2[prop]
      }
    }
    return obj1
  }
  /**
   * Helper constructor
   *
   * @class
   * @param {*} query jQuery type query argument
   */
  function Helper(query) {
    if (!this || this.find !== Helper.prototype.find) {
      // Called as function instead of as constructor,
      // so we simply return a new instance:
      return new Helper(query)
    }
    this.length = 0
    if (query) {
      if (typeof query === 'string') {
        query = this.find(query)
      }
      if (query.nodeType || query === query.window) {
        // Single HTML element
        this.length = 1
        this[0] = query
      } else {
        // HTML element collection
        var i = query.length
        this.length = i
        while (i) {
          i -= 1
          this[i] = query[i]
        }
      }
    }
  }

  Helper.extend = extend

  Helper.contains = function (container, element) {
    do {
      element = element.parentNode
      if (element === container) {
        return true
      }
    } while (element)
    return false
  }

  Helper.parseJSON = function (string) {
    return window.JSON && JSON.parse(string)
  }

  extend(Helper.prototype, {
    find: function (query) {
      var container = this[0] || document
      if (typeof query === 'string') {
        if (container.querySelectorAll) {
          query = container.querySelectorAll(query)
        } else if (query.charAt(0) === '#') {
          query = container.getElementById(query.slice(1))
        } else {
          query = container.getElementsByTagName(query)
        }
      }
      return new Helper(query)
    },

    hasClass: function (className) {
      if (!this[0]) {
        return false
      }
      return new RegExp('(^|\\s+)' + className + '(\\s+|$)').test(
        this[0].className
      )
    },

    addClass: function (className) {
      var i = this.length
      var element
      while (i) {
        i -= 1
        element = this[i]
        if (!element.className) {
          element.className = className
          return this
        }
        if (this.hasClass(className)) {
          return this
        }
        element.className += ' ' + className
      }
      return this
    },

    removeClass: function (className) {
      var regexp = new RegExp('(^|\\s+)' + className + '(\\s+|$)')
      var i = this.length
      var element
      while (i) {
        i -= 1
        element = this[i]
        element.className = element.className.replace(regexp, ' ')
      }
      return this
    },

    on: function (eventName, handler) {
      var eventNames = eventName.split(/\s+/)
      var i
      var element
      while (eventNames.length) {
        eventName = eventNames.shift()
        i = this.length
        while (i) {
          i -= 1
          element = this[i]
          if (element.addEventListener) {
            element.addEventListener(eventName, handler, false)
          } else if (element.attachEvent) {
            element.attachEvent('on' + eventName, handler)
          }
        }
      }
      return this
    },

    off: function (eventName, handler) {
      var eventNames = eventName.split(/\s+/)
      var i
      var element
      while (eventNames.length) {
        eventName = eventNames.shift()
        i = this.length
        while (i) {
          i -= 1
          element = this[i]
          if (element.removeEventListener) {
            element.removeEventListener(eventName, handler, false)
          } else if (element.detachEvent) {
            element.detachEvent('on' + eventName, handler)
          }
        }
      }
      return this
    },

    empty: function () {
      var i = this.length
      var element
      while (i) {
        i -= 1
        element = this[i]
        while (element.hasChildNodes()) {
          element.removeChild(element.lastChild)
        }
      }
      return this
    },

    first: function () {
      return new Helper(this[0])
    }
  })

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return Helper
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
})()


/***/ }),

/***/ "./node_modules/get-youtube-id/index.js":
/*!**********************************************!*\
  !*** ./node_modules/get-youtube-id/index.js ***!
  \**********************************************/
/***/ (function(module) {


(function (root, factory) {
  if (true) {
    module.exports = factory();
  } else {}
}(this, function (exports) {

  return function (url, opts) {
    if (opts == undefined) {
      opts = {fuzzy: true};
    }

    if (/youtu\.?be/.test(url)) {

      // Look first for known patterns
      var i;
      var patterns = [
        /youtu\.be\/([^#\&\?]{11})/,  // youtu.be/<id>
        /\?v=([^#\&\?]{11})/,         // ?v=<id>
        /\&v=([^#\&\?]{11})/,         // &v=<id>
        /embed\/([^#\&\?]{11})/,      // embed/<id>
        /\/v\/([^#\&\?]{11})/         // /v/<id>
      ];

      // If any pattern matches, return the ID
      for (i = 0; i < patterns.length; ++i) {
        if (patterns[i].test(url)) {
          return patterns[i].exec(url)[1];
        }
      }

      if (opts.fuzzy) {
        // If that fails, break it apart by certain characters and look 
        // for the 11 character key
        var tokens = url.split(/[\/\&\?=#\.\s]/g);
        for (i = 0; i < tokens.length; ++i) {
          if (/^[^#\&\?]{11}$/.test(tokens[i])) {
            return tokens[i];
          }
        }
      }
    }

    return null;
  };

}));


/***/ }),

/***/ "./node_modules/blueimp-gallery/css/blueimp-gallery.min.css":
/*!******************************************************************!*\
  !*** ./node_modules/blueimp-gallery/css/blueimp-gallery.min.css ***!
  \******************************************************************/
/***/ (() => {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./node_modules/vue-gallery/dist/js/vue-gallery.js":
/*!*********************************************************!*\
  !*** ./node_modules/vue-gallery/dist/js/vue-gallery.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function (global, factory) {
   true ? module.exports = factory(__webpack_require__(/*! blueimp-gallery/css/blueimp-gallery.min.css */ "./node_modules/blueimp-gallery/css/blueimp-gallery.min.css"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery-fullscreen.js */ "./node_modules/blueimp-gallery/js/blueimp-gallery-fullscreen.js"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery-video.js */ "./node_modules/blueimp-gallery/js/blueimp-gallery-video.js"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery-youtube.js */ "./node_modules/blueimp-gallery/js/blueimp-gallery-youtube.js"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery.js */ "./node_modules/blueimp-gallery/js/blueimp-gallery.js")) :
  0;
}(this, function (blueimpGallery_min_css, blueimpGalleryFullscreen_js, blueimpGalleryVideo_js, blueimpGalleryYoutube_js, blueimp) { 'use strict';

  blueimp = blueimp && blueimp.hasOwnProperty('default') ? blueimp['default'] : blueimp;

  //
  var script = {
    props: {
      images: {
        type: Array,
        default: function _default() {
          return [];
        }
      },
      options: {
        type: Object,
        default: function _default() {
          return {};
        }
      },
      carousel: {
        type: Boolean,
        default: false
      },
      index: {
        type: Number
      },
      id: {
        type: String,
        default: 'blueimp-gallery'
      }
    },
    data: function data() {
      return {
        instance: null
      };
    },
    watch: {
      index: function index(value) {
        if (this.carousel) {
          return;
        }

        if (value !== null) {
          this.open(value);
        } else {
          if (this.instance) {
            this.instance.close();
          }

          this.$emit('close');
        }
      }
    },
    mounted: function mounted() {
      if (this.carousel) {
        this.open();
      }
    },
    destroyed: function destroyed() {
      if (this.instance !== null) {
        this.instance.destroyEventListeners();
        this.instance.close();
        this.instance = null;
      }
    },
    methods: {
      open: function open() {
        var _this = this;

        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var instance = typeof blueimp.Gallery !== 'undefined' ? blueimp.Gallery : blueimp;
        var options = Object.assign({
          toggleControlsOnReturn: false,
          toggleControlsOnSlideClick: false,
          closeOnSlideClick: false,
          carousel: this.carousel,
          container: "#".concat(this.id),
          index: index,
          onopen: function onopen() {
            return _this.$emit('onopen');
          },
          onopened: function onopened() {
            return _this.$emit('onopened');
          },
          onslide: this.onSlideCustom,
          onslideend: function onslideend(index, slide) {
            return _this.$emit('onslideend', {
              index: index,
              slide: slide
            });
          },
          onslidecomplete: function onslidecomplete(index, slide) {
            return _this.$emit('onslidecomplete', {
              index: index,
              slide: slide
            });
          },
          onclose: function onclose() {
            return _this.$emit('close');
          },
          onclosed: function onclosed() {
            return _this.$emit('onclosed');
          }
        }, this.options);

        if (this.carousel) {
          options.container = this.$el;
        }

        this.instance = instance(this.images, options);
      },
      onSlideCustom: function onSlideCustom(index, slide) {
        this.$emit('onslide', {
          index: index,
          slide: slide
        });
        var image = this.images[index];

        if (image !== undefined) {
          var text = image.description;
          var node = this.instance.container.find('.description');

          if (text) {
            node.empty();
            node[0].appendChild(document.createTextNode(text));
          }
        }
      }
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    var options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    var hook;

    if (moduleIdentifier) {
      // server build
      hook = function hook(context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        var originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }

  var normalizeComponent_1 = normalizeComponent;

  var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

  function createInjector(context) {
    return function (id, style) {
      return addStyle(id, style);
    };
  }

  var HEAD = document.head || document.getElementsByTagName('head')[0];
  var styles = {};

  function addStyle(id, css) {
    var group = isOldIE ? css.media || 'default' : id;
    var style = styles[group] || (styles[group] = {
      ids: new Set(),
      styles: []
    });

    if (!style.ids.has(id)) {
      style.ids.add(id);
      var code = css.source;

      if (css.map) {
        // https://developer.chrome.com/devtools/docs/javascript-debugging
        // this makes source maps inside style tags work properly in Chrome
        code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

        code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
      }

      if (!style.element) {
        style.element = document.createElement('style');
        style.element.type = 'text/css';
        if (css.media) style.element.setAttribute('media', css.media);
        HEAD.appendChild(style.element);
      }

      if ('styleSheet' in style.element) {
        style.styles.push(code);
        style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\n');
      } else {
        var index = style.ids.size - 1;
        var textNode = document.createTextNode(code);
        var nodes = style.element.childNodes;
        if (nodes[index]) style.element.removeChild(nodes[index]);
        if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
      }
    }
  }

  var browser = createInjector;

  /* script */
  const __vue_script__ = script;

  /* template */
  var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"blueimp-gallery blueimp-gallery-controls",class:{'blueimp-gallery-carousel': _vm.carousel},attrs:{"id":_vm.id}},[_c('div',{staticClass:"slides"}),_vm._v(" "),_c('h3',{staticClass:"title"}),_vm._v(" "),_c('p',{staticClass:"description"}),_vm._v(" "),_c('a',{staticClass:"prev"},[_vm._t("prev",[_vm._v("‹")])],2),_vm._v(" "),_c('a',{staticClass:"next"},[_vm._t("next",[_vm._v("›")])],2),_vm._v(" "),(!_vm.carousel)?_c('a',{staticClass:"close"},[_vm._t("close",[_vm._v("×")])],2):_vm._e(),_vm._v(" "),(!_vm.carousel)?_c('ol',{staticClass:"indicator"}):_vm._e(),_vm._v(" "),(_vm.carousel)?_c('a',{staticClass:"play-pause"}):_vm._e()])};
  var __vue_staticRenderFns__ = [];

    /* style */
    const __vue_inject_styles__ = function (inject) {
      if (!inject) return
      inject("data-v-6d2033ba_0", { source: ".blueimp-gallery>.description{position:absolute;top:30px;left:15px;color:#fff;display:none}.blueimp-gallery-controls>.description{display:block}", map: undefined, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__ = undefined;
    /* module identifier */
    const __vue_module_identifier__ = undefined;
    /* functional template */
    const __vue_is_functional_template__ = false;
    /* style inject SSR */
    

    
    var VueGallery = normalizeComponent_1(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      browser,
      undefined
    );

  return VueGallery;

}));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uL2pzL2NodW5rcy92ZW5kb3JzLW5vZGVfbW9kdWxlc19nZXQteW91dHViZS1pZF9pbmRleF9qcy1ub2RlX21vZHVsZXNfdnVlLWdhbGxlcnlfZGlzdF9qc192dWUtZ2FsbGVyeV9qcy5taW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLElBQTBDO0FBQ2hEO0FBQ0EsSUFBSSxpQ0FBTyxDQUFDLGtHQUFrQixFQUFFLG9HQUFtQixDQUFDLG9DQUFFLE9BQU87QUFBQTtBQUFBO0FBQUEsa0dBQUM7QUFDOUQsSUFBSSxLQUFLLEVBR047QUFDSCxDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7Ozs7Ozs7Ozs7O0FDckZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUM7QUFDRDtBQUNBLE1BQU0sSUFBMEM7QUFDaEQ7QUFDQSxJQUFJLGlDQUFPLENBQUMsa0dBQWtCLEVBQUUsb0dBQW1CLENBQUMsb0NBQUUsT0FBTztBQUFBO0FBQUE7QUFBQSxrR0FBQztBQUM5RCxJQUFJLEtBQUssRUFHTjtBQUNILENBQUM7QUFDRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOzs7Ozs7Ozs7OztBQzFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLElBQTBDO0FBQ2hEO0FBQ0EsSUFBSSxpQ0FBTyxDQUFDLGtHQUFrQixFQUFFLGdIQUF5QixDQUFDLG9DQUFFLE9BQU87QUFBQTtBQUFBO0FBQUEsa0dBQUM7QUFDcEUsSUFBSSxLQUFLLEVBR047QUFDSCxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7QUNoT0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQztBQUNEO0FBQ0EsTUFBTSxJQUEwQztBQUNoRDtBQUNBLElBQUksaUNBQU8sQ0FBQyxrR0FBa0IsQ0FBQyxvQ0FBRSxPQUFPO0FBQUE7QUFBQTtBQUFBLGtHQUFDO0FBQ3pDLElBQUksS0FBSyxFQUlOO0FBQ0gsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsY0FBYztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekIsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QixtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixXQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLDRDQUE0QyxTQUFTO0FBQ3JEO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxTQUFTO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7QUNyOENEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxNQUFNLElBQTBDO0FBQ2hELElBQUksbUNBQU87QUFDWDtBQUNBLEtBQUs7QUFBQSxrR0FBQztBQUNOLElBQUksS0FBSyxFQUdOO0FBQ0gsQ0FBQzs7Ozs7Ozs7Ozs7O0FDMU1EO0FBQ0EsTUFBTSxJQUEyQjtBQUNqQztBQUNBLElBQUksS0FBSyxFQUlOO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixHQUFHO0FBQ2pDLHVCQUF1QixHQUFHO0FBQzFCLHVCQUF1QixHQUFHO0FBQzFCLDBCQUEwQixHQUFHO0FBQzdCLHdCQUF3QixHQUFHO0FBQzNCOztBQUVBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkMseUJBQXlCLEdBQUc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLENBQUM7Ozs7Ozs7Ozs7O0FDbEREOzs7Ozs7Ozs7O0FDQUE7QUFDQSxFQUFFLEtBQTRELDRCQUE0QixtQkFBTyxDQUFDLCtHQUE2QyxHQUFHLG1CQUFPLENBQUMseUhBQWtELEdBQUcsbUJBQU8sQ0FBQywrR0FBNkMsR0FBRyxtQkFBTyxDQUFDLG1IQUErQyxHQUFHLG1CQUFPLENBQUMsbUdBQXVDO0FBQ2hYLEVBQUUsQ0FDOEY7QUFDaEcsQ0FBQyxtSUFBbUk7O0FBRXBJOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOLDBFQUEwRTs7QUFFMUU7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFO0FBQzVFOztBQUVBO0FBQ0E7QUFDQSxVQUFVOzs7QUFHVjtBQUNBO0FBQ0EsVUFBVTs7O0FBR1Y7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOzs7QUFHQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7O0FBRWpFLDhEQUE4RDtBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsOERBQThELHlDQUF5QyxRQUFRLGFBQWEsWUFBWSxxQkFBcUIsdUJBQXVCLG9CQUFvQixzQkFBc0IsMEJBQTBCLHNCQUFzQixtQkFBbUIsdURBQXVELG1CQUFtQix1RUFBdUUsb0JBQW9CLGtGQUFrRix3QkFBd0IsOENBQThDLHlCQUF5QjtBQUMzdUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHVDQUF1QyxrQkFBa0IsU0FBUyxVQUFVLFdBQVcsYUFBYSx1Q0FBdUMsY0FBYyxxQ0FBcUM7O0FBRWxPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxrRUFBa0U7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWVvbl9wZXQvLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2pzL2JsdWVpbXAtZ2FsbGVyeS1mdWxsc2NyZWVuLmpzIiwid2VicGFjazovL2Flb25fcGV0Ly4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9qcy9ibHVlaW1wLWdhbGxlcnktdmlkZW8uanMiLCJ3ZWJwYWNrOi8vYWVvbl9wZXQvLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2pzL2JsdWVpbXAtZ2FsbGVyeS15b3V0dWJlLmpzIiwid2VicGFjazovL2Flb25fcGV0Ly4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9qcy9ibHVlaW1wLWdhbGxlcnkuanMiLCJ3ZWJwYWNrOi8vYWVvbl9wZXQvLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2pzL2JsdWVpbXAtaGVscGVyLmpzIiwid2VicGFjazovL2Flb25fcGV0Ly4vbm9kZV9tb2R1bGVzL2dldC15b3V0dWJlLWlkL2luZGV4LmpzIiwid2VicGFjazovL2Flb25fcGV0Ly4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9jc3MvYmx1ZWltcC1nYWxsZXJ5Lm1pbi5jc3MiLCJ3ZWJwYWNrOi8vYWVvbl9wZXQvLi9ub2RlX21vZHVsZXMvdnVlLWdhbGxlcnkvZGlzdC9qcy92dWUtZ2FsbGVyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogYmx1ZWltcCBHYWxsZXJ5IEZ1bGxzY3JlZW4gSlNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL0dhbGxlcnlcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMywgU2ViYXN0aWFuIFRzY2hhblxuICogaHR0cHM6Ly9ibHVlaW1wLm5ldFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKi9cblxuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0J1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIEFNRCBtb2R1bGU6XG4gICAgZGVmaW5lKFsnLi9ibHVlaW1wLWhlbHBlcicsICcuL2JsdWVpbXAtZ2FsbGVyeSddLCBmYWN0b3J5KVxuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsczpcbiAgICBmYWN0b3J5KHdpbmRvdy5ibHVlaW1wLmhlbHBlciB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3cuYmx1ZWltcC5HYWxsZXJ5KVxuICB9XG59KShmdW5jdGlvbiAoJCwgR2FsbGVyeSkge1xuICAndXNlIHN0cmljdCdcblxuICB2YXIgZ2FsbGVyeVByb3RvdHlwZSA9IEdhbGxlcnkucHJvdG90eXBlXG5cbiAgJC5leHRlbmQoZ2FsbGVyeVByb3RvdHlwZS5vcHRpb25zLCB7XG4gICAgLy8gRGVmaW5lcyBpZiB0aGUgZ2FsbGVyeSBzaG91bGQgb3BlbiBpbiBmdWxsc2NyZWVuIG1vZGU6XG4gICAgZnVsbFNjcmVlbjogZmFsc2VcbiAgfSlcblxuICB2YXIgaW5pdGlhbGl6ZSA9IGdhbGxlcnlQcm90b3R5cGUuaW5pdGlhbGl6ZVxuICB2YXIgY2xvc2UgPSBnYWxsZXJ5UHJvdG90eXBlLmNsb3NlXG5cbiAgJC5leHRlbmQoZ2FsbGVyeVByb3RvdHlwZSwge1xuICAgIGdldEZ1bGxTY3JlZW5FbGVtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fFxuICAgICAgICBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCB8fFxuICAgICAgICBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fFxuICAgICAgICBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50XG4gICAgICApXG4gICAgfSxcblxuICAgIHJlcXVlc3RGdWxsU2NyZWVuOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpXG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpXG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpXG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICBlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBleGl0RnVsbFNjcmVlbjogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKClcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICBkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuKClcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKClcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgaW5pdGlhbGl6ZS5jYWxsKHRoaXMpXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4gJiYgIXRoaXMuZ2V0RnVsbFNjcmVlbkVsZW1lbnQoKSkge1xuICAgICAgICB0aGlzLnJlcXVlc3RGdWxsU2NyZWVuKHRoaXMuY29udGFpbmVyWzBdKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuZ2V0RnVsbFNjcmVlbkVsZW1lbnQoKSA9PT0gdGhpcy5jb250YWluZXJbMF0pIHtcbiAgICAgICAgdGhpcy5leGl0RnVsbFNjcmVlbigpXG4gICAgICB9XG4gICAgICBjbG9zZS5jYWxsKHRoaXMpXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBHYWxsZXJ5XG59KVxuIiwiLypcbiAqIGJsdWVpbXAgR2FsbGVyeSBWaWRlbyBGYWN0b3J5IEpTXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9HYWxsZXJ5XG4gKlxuICogQ29weXJpZ2h0IDIwMTMsIFNlYmFzdGlhbiBUc2NoYW5cbiAqIGh0dHBzOi8vYmx1ZWltcC5uZXRcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAndXNlIHN0cmljdCdcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBBTUQgbW9kdWxlOlxuICAgIGRlZmluZShbJy4vYmx1ZWltcC1oZWxwZXInLCAnLi9ibHVlaW1wLWdhbGxlcnknXSwgZmFjdG9yeSlcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHM6XG4gICAgZmFjdG9yeSh3aW5kb3cuYmx1ZWltcC5oZWxwZXIgfHwgd2luZG93LmpRdWVyeSwgd2luZG93LmJsdWVpbXAuR2FsbGVyeSlcbiAgfVxufSkoZnVuY3Rpb24gKCQsIEdhbGxlcnkpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgdmFyIGdhbGxlcnlQcm90b3R5cGUgPSBHYWxsZXJ5LnByb3RvdHlwZVxuXG4gICQuZXh0ZW5kKGdhbGxlcnlQcm90b3R5cGUub3B0aW9ucywge1xuICAgIC8vIFRoZSBjbGFzcyBmb3IgdmlkZW8gY29udGVudCBlbGVtZW50czpcbiAgICB2aWRlb0NvbnRlbnRDbGFzczogJ3ZpZGVvLWNvbnRlbnQnLFxuICAgIC8vIFRoZSBjbGFzcyBmb3IgdmlkZW8gd2hlbiBpdCBpcyBsb2FkaW5nOlxuICAgIHZpZGVvTG9hZGluZ0NsYXNzOiAndmlkZW8tbG9hZGluZycsXG4gICAgLy8gVGhlIGNsYXNzIGZvciB2aWRlbyB3aGVuIGl0IGlzIHBsYXlpbmc6XG4gICAgdmlkZW9QbGF5aW5nQ2xhc3M6ICd2aWRlby1wbGF5aW5nJyxcbiAgICAvLyBUaGUgbGlzdCBvYmplY3QgcHJvcGVydHkgKG9yIGRhdGEgYXR0cmlidXRlKSBmb3IgdGhlIHZpZGVvIHBvc3RlciBVUkw6XG4gICAgdmlkZW9Qb3N0ZXJQcm9wZXJ0eTogJ3Bvc3RlcicsXG4gICAgLy8gVGhlIGxpc3Qgb2JqZWN0IHByb3BlcnR5IChvciBkYXRhIGF0dHJpYnV0ZSkgZm9yIHRoZSB2aWRlbyBzb3VyY2VzIGFycmF5OlxuICAgIHZpZGVvU291cmNlc1Byb3BlcnR5OiAnc291cmNlcydcbiAgfSlcblxuICB2YXIgaGFuZGxlU2xpZGUgPSBnYWxsZXJ5UHJvdG90eXBlLmhhbmRsZVNsaWRlXG5cbiAgJC5leHRlbmQoZ2FsbGVyeVByb3RvdHlwZSwge1xuICAgIGhhbmRsZVNsaWRlOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIGhhbmRsZVNsaWRlLmNhbGwodGhpcywgaW5kZXgpXG4gICAgICBpZiAodGhpcy5wbGF5aW5nVmlkZW8pIHtcbiAgICAgICAgdGhpcy5wbGF5aW5nVmlkZW8ucGF1c2UoKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB2aWRlb0ZhY3Rvcnk6IGZ1bmN0aW9uIChvYmosIGNhbGxiYWNrLCB2aWRlb0ludGVyZmFjZSkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICAgICAgdmFyIHZpZGVvQ29udGFpbmVyTm9kZSA9IHRoaXMuZWxlbWVudFByb3RvdHlwZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICB2YXIgdmlkZW9Db250YWluZXIgPSAkKHZpZGVvQ29udGFpbmVyTm9kZSlcbiAgICAgIHZhciBlcnJvckFyZ3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgIHRhcmdldDogdmlkZW9Db250YWluZXJOb2RlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICAgIHZhciB2aWRlbyA9IHZpZGVvSW50ZXJmYWNlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJylcbiAgICAgIHZhciB1cmwgPSB0aGlzLmdldEl0ZW1Qcm9wZXJ0eShvYmosIG9wdGlvbnMudXJsUHJvcGVydHkpXG4gICAgICB2YXIgdHlwZSA9IHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgb3B0aW9ucy50eXBlUHJvcGVydHkpXG4gICAgICB2YXIgdGl0bGUgPSB0aGlzLmdldEl0ZW1Qcm9wZXJ0eShvYmosIG9wdGlvbnMudGl0bGVQcm9wZXJ0eSlcbiAgICAgIHZhciBhbHRUZXh0ID1cbiAgICAgICAgdGhpcy5nZXRJdGVtUHJvcGVydHkob2JqLCB0aGlzLm9wdGlvbnMuYWx0VGV4dFByb3BlcnR5KSB8fCB0aXRsZVxuICAgICAgdmFyIHBvc3RlclVybCA9IHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgb3B0aW9ucy52aWRlb1Bvc3RlclByb3BlcnR5KVxuICAgICAgdmFyIHBvc3RlckltYWdlXG4gICAgICB2YXIgc291cmNlcyA9IHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgb3B0aW9ucy52aWRlb1NvdXJjZXNQcm9wZXJ0eSlcbiAgICAgIHZhciBzb3VyY2VcbiAgICAgIHZhciBwbGF5TWVkaWFDb250cm9sXG4gICAgICB2YXIgaXNMb2FkaW5nXG4gICAgICB2YXIgaGFzQ29udHJvbHNcbiAgICAgIHZpZGVvQ29udGFpbmVyLmFkZENsYXNzKG9wdGlvbnMudmlkZW9Db250ZW50Q2xhc3MpXG4gICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgdmlkZW9Db250YWluZXJOb2RlLnRpdGxlID0gdGl0bGVcbiAgICAgIH1cbiAgICAgIGlmICh2aWRlby5jYW5QbGF5VHlwZSkge1xuICAgICAgICBpZiAodXJsICYmIHR5cGUgJiYgdmlkZW8uY2FuUGxheVR5cGUodHlwZSkpIHtcbiAgICAgICAgICB2aWRlby5zcmMgPSB1cmxcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VzKSB7XG4gICAgICAgICAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KClcbiAgICAgICAgICAgIHVybCA9IHRoaXMuZ2V0SXRlbVByb3BlcnR5KHNvdXJjZSwgb3B0aW9ucy51cmxQcm9wZXJ0eSlcbiAgICAgICAgICAgIHR5cGUgPSB0aGlzLmdldEl0ZW1Qcm9wZXJ0eShzb3VyY2UsIG9wdGlvbnMudHlwZVByb3BlcnR5KVxuICAgICAgICAgICAgaWYgKHVybCAmJiB0eXBlICYmIHZpZGVvLmNhblBsYXlUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgIHZpZGVvLnNyYyA9IHVybFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBvc3RlclVybCkge1xuICAgICAgICB2aWRlby5wb3N0ZXIgPSBwb3N0ZXJVcmxcbiAgICAgICAgcG9zdGVySW1hZ2UgPSB0aGlzLmltYWdlUHJvdG90eXBlLmNsb25lTm9kZShmYWxzZSlcbiAgICAgICAgJChwb3N0ZXJJbWFnZSkuYWRkQ2xhc3Mob3B0aW9ucy50b2dnbGVDbGFzcylcbiAgICAgICAgcG9zdGVySW1hZ2Uuc3JjID0gcG9zdGVyVXJsXG4gICAgICAgIHBvc3RlckltYWdlLmRyYWdnYWJsZSA9IGZhbHNlXG4gICAgICAgIHBvc3RlckltYWdlLmFsdCA9IGFsdFRleHRcbiAgICAgICAgdmlkZW9Db250YWluZXJOb2RlLmFwcGVuZENoaWxkKHBvc3RlckltYWdlKVxuICAgICAgfVxuICAgICAgcGxheU1lZGlhQ29udHJvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICAgICAgcGxheU1lZGlhQ29udHJvbC5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsICdfYmxhbmsnKVxuICAgICAgaWYgKCF2aWRlb0ludGVyZmFjZSkge1xuICAgICAgICBwbGF5TWVkaWFDb250cm9sLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCB0aXRsZSlcbiAgICAgIH1cbiAgICAgIHBsYXlNZWRpYUNvbnRyb2wuaHJlZiA9IHVybFxuICAgICAgaWYgKHZpZGVvLnNyYykge1xuICAgICAgICB2aWRlby5jb250cm9scyA9IHRydWVcbiAgICAgICAgOyh2aWRlb0ludGVyZmFjZSB8fCAkKHZpZGVvKSlcbiAgICAgICAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC5zZXRUaW1lb3V0KGNhbGxiYWNrLCBlcnJvckFyZ3MpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ3BhdXNlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHZpZGVvLnNlZWtpbmcpIHJldHVyblxuICAgICAgICAgICAgaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIHZpZGVvQ29udGFpbmVyXG4gICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyh0aGF0Lm9wdGlvbnMudmlkZW9Mb2FkaW5nQ2xhc3MpXG4gICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyh0aGF0Lm9wdGlvbnMudmlkZW9QbGF5aW5nQ2xhc3MpXG4gICAgICAgICAgICBpZiAoaGFzQ29udHJvbHMpIHtcbiAgICAgICAgICAgICAgdGhhdC5jb250YWluZXIuYWRkQ2xhc3ModGhhdC5vcHRpb25zLmNvbnRyb2xzQ2xhc3MpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgdGhhdC5wbGF5aW5nVmlkZW9cbiAgICAgICAgICAgIGlmICh0aGF0LmludGVydmFsKSB7XG4gICAgICAgICAgICAgIHRoYXQucGxheSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ3BsYXlpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgdmlkZW9Db250YWluZXJcbiAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoYXQub3B0aW9ucy52aWRlb0xvYWRpbmdDbGFzcylcbiAgICAgICAgICAgICAgLmFkZENsYXNzKHRoYXQub3B0aW9ucy52aWRlb1BsYXlpbmdDbGFzcylcbiAgICAgICAgICAgIGlmICh0aGF0LmNvbnRhaW5lci5oYXNDbGFzcyh0aGF0Lm9wdGlvbnMuY29udHJvbHNDbGFzcykpIHtcbiAgICAgICAgICAgICAgaGFzQ29udHJvbHMgPSB0cnVlXG4gICAgICAgICAgICAgIHRoYXQuY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoYXQub3B0aW9ucy5jb250cm9sc0NsYXNzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaGFzQ29udHJvbHMgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdwbGF5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGF0LnRpbWVvdXQpXG4gICAgICAgICAgICBpc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICAgICB2aWRlb0NvbnRhaW5lci5hZGRDbGFzcyh0aGF0Lm9wdGlvbnMudmlkZW9Mb2FkaW5nQ2xhc3MpXG4gICAgICAgICAgICB0aGF0LnBsYXlpbmdWaWRlbyA9IHZpZGVvXG4gICAgICAgICAgfSlcbiAgICAgICAgJChwbGF5TWVkaWFDb250cm9sKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICB0aGF0LnByZXZlbnREZWZhdWx0KGV2ZW50KVxuICAgICAgICAgIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgICAgICAgIHZpZGVvLnBhdXNlKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlkZW8ucGxheSgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICB2aWRlb0NvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgKHZpZGVvSW50ZXJmYWNlICYmIHZpZGVvSW50ZXJmYWNlLmVsZW1lbnQpIHx8IHZpZGVvXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHZpZGVvQ29udGFpbmVyTm9kZS5hcHBlbmRDaGlsZChwbGF5TWVkaWFDb250cm9sKVxuICAgICAgdGhpcy5zZXRUaW1lb3V0KGNhbGxiYWNrLCBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnbG9hZCcsXG4gICAgICAgICAgdGFyZ2V0OiB2aWRlb0NvbnRhaW5lck5vZGVcbiAgICAgICAgfVxuICAgICAgXSlcbiAgICAgIHJldHVybiB2aWRlb0NvbnRhaW5lck5vZGVcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIEdhbGxlcnlcbn0pXG4iLCIvKlxuICogYmx1ZWltcCBHYWxsZXJ5IFlvdVR1YmUgVmlkZW8gRmFjdG9yeSBKU1xuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvR2FsbGVyeVxuICpcbiAqIENvcHlyaWdodCAyMDEzLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqL1xuXG4vKiBnbG9iYWwgZGVmaW5lLCBZVCAqL1xuXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0J1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIEFNRCBtb2R1bGU6XG4gICAgZGVmaW5lKFsnLi9ibHVlaW1wLWhlbHBlcicsICcuL2JsdWVpbXAtZ2FsbGVyeS12aWRlbyddLCBmYWN0b3J5KVxuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsczpcbiAgICBmYWN0b3J5KHdpbmRvdy5ibHVlaW1wLmhlbHBlciB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3cuYmx1ZWltcC5HYWxsZXJ5KVxuICB9XG59KShmdW5jdGlvbiAoJCwgR2FsbGVyeSkge1xuICAndXNlIHN0cmljdCdcblxuICBpZiAoIXdpbmRvdy5wb3N0TWVzc2FnZSkge1xuICAgIHJldHVybiBHYWxsZXJ5XG4gIH1cblxuICB2YXIgZ2FsbGVyeVByb3RvdHlwZSA9IEdhbGxlcnkucHJvdG90eXBlXG5cbiAgJC5leHRlbmQoZ2FsbGVyeVByb3RvdHlwZS5vcHRpb25zLCB7XG4gICAgLy8gVGhlIGxpc3Qgb2JqZWN0IHByb3BlcnR5IChvciBkYXRhIGF0dHJpYnV0ZSkgd2l0aCB0aGUgWW91VHViZSB2aWRlbyBpZDpcbiAgICB5b3VUdWJlVmlkZW9JZFByb3BlcnR5OiAneW91dHViZScsXG4gICAgLy8gT3B0aW9uYWwgb2JqZWN0IHdpdGggcGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIFlvdVR1YmUgdmlkZW8gcGxheWVyOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvcGxheWVyX3BhcmFtZXRlcnNcbiAgICB5b3VUdWJlUGxheWVyVmFyczoge1xuICAgICAgd21vZGU6ICd0cmFuc3BhcmVudCdcbiAgICB9LFxuICAgIC8vIFJlcXVpcmUgYSBjbGljayBvbiB0aGUgbmF0aXZlIFlvdVR1YmUgcGxheWVyIGZvciB0aGUgaW5pdGlhbCBwbGF5YmFjazpcbiAgICB5b3VUdWJlQ2xpY2tUb1BsYXk6IHRydWVcbiAgfSlcblxuICB2YXIgdGV4dEZhY3RvcnkgPVxuICAgIGdhbGxlcnlQcm90b3R5cGUudGV4dEZhY3RvcnkgfHwgZ2FsbGVyeVByb3RvdHlwZS5pbWFnZUZhY3RvcnlcbiAgdmFyIFlvdVR1YmVQbGF5ZXIgPSBmdW5jdGlvbiAodmlkZW9JZCwgcGxheWVyVmFycywgY2xpY2tUb1BsYXkpIHtcbiAgICB0aGlzLnZpZGVvSWQgPSB2aWRlb0lkXG4gICAgdGhpcy5wbGF5ZXJWYXJzID0gcGxheWVyVmFyc1xuICAgIHRoaXMuY2xpY2tUb1BsYXkgPSBjbGlja1RvUGxheVxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fVxuICB9XG5cbiAgJC5leHRlbmQoWW91VHViZVBsYXllci5wcm90b3R5cGUsIHtcbiAgICBjYW5QbGF5VHlwZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgb246IGZ1bmN0aW9uICh0eXBlLCBmdW5jKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IGZ1bmNcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIGxvYWRBUEk6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgdmFyIG9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5XG4gICAgICB2YXIgYXBpVXJsID0gJy8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknXG4gICAgICB2YXIgc2NyaXB0VGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVxuICAgICAgdmFyIGkgPSBzY3JpcHRUYWdzLmxlbmd0aFxuICAgICAgdmFyIHNjcmlwdFRhZ1xuICAgICAgd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAob25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkpIHtcbiAgICAgICAgICBvbllvdVR1YmVJZnJhbWVBUElSZWFkeS5hcHBseSh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGF0LnBsYXlPblJlYWR5KSB7XG4gICAgICAgICAgdGhhdC5wbGF5KClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKGkpIHtcbiAgICAgICAgaSAtPSAxXG4gICAgICAgIGlmIChzY3JpcHRUYWdzW2ldLnNyYyA9PT0gYXBpVXJsKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNjcmlwdFRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXG4gICAgICBzY3JpcHRUYWcuc3JjID0gYXBpVXJsXG4gICAgICBzY3JpcHRUYWdzWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdFRhZywgc2NyaXB0VGFnc1swXSlcbiAgICB9LFxuXG4gICAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5yZWFkeSA9IHRydWVcbiAgICAgIGlmICh0aGlzLnBsYXlPblJlYWR5KSB7XG4gICAgICAgIHRoaXMucGxheSgpXG4gICAgICB9XG4gICAgfSxcblxuICAgIG9uUGxheWluZzogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMucGxheVN0YXR1cyA8IDIpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucGxheWluZygpXG4gICAgICAgIHRoaXMucGxheVN0YXR1cyA9IDJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb25QYXVzZTogZnVuY3Rpb24gKCkge1xuICAgICAgZ2FsbGVyeVByb3RvdHlwZS5zZXRUaW1lb3V0LmNhbGwodGhpcywgdGhpcy5jaGVja1NlZWssIG51bGwsIDIwMDApXG4gICAgfSxcblxuICAgIGNoZWNrU2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlID09PSBZVC5QbGF5ZXJTdGF0ZS5QQVVTRUQgfHxcbiAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZSA9PT0gWVQuUGxheWVyU3RhdGUuRU5ERURcbiAgICAgICkge1xuICAgICAgICAvLyBjaGVjayBpZiBjdXJyZW50IHN0YXRlIGNoYW5nZSBpcyBhY3R1YWxseSBwYXVzZWRcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucGF1c2UoKVxuICAgICAgICBkZWxldGUgdGhpcy5wbGF5U3RhdHVzXG4gICAgICB9XG4gICAgfSxcblxuICAgIG9uU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5kYXRhKSB7XG4gICAgICAgIGNhc2UgWVQuUGxheWVyU3RhdGUuUExBWUlORzpcbiAgICAgICAgICB0aGlzLmhhc1BsYXllZCA9IHRydWVcbiAgICAgICAgICB0aGlzLm9uUGxheWluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBZVC5QbGF5ZXJTdGF0ZS5QQVVTRUQ6XG4gICAgICAgIGNhc2UgWVQuUGxheWVyU3RhdGUuRU5ERUQ6XG4gICAgICAgICAgdGhpcy5vblBhdXNlKClcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgLy8gU2F2ZSBtb3N0IHJlY2VudCBzdGF0ZSBjaGFuZ2UgdG8gdGhpcy5zdGF0ZUNoYW5nZVxuICAgICAgdGhpcy5zdGF0ZUNoYW5nZSA9IGV2ZW50LmRhdGFcbiAgICB9LFxuXG4gICAgb25FcnJvcjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5lcnJvcihldmVudClcbiAgICB9LFxuXG4gICAgcGxheTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICBpZiAoIXRoaXMucGxheVN0YXR1cykge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5wbGF5KClcbiAgICAgICAgdGhpcy5wbGF5U3RhdHVzID0gMVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICF0aGlzLmhhc1BsYXllZCAmJlxuICAgICAgICAgICh0aGlzLmNsaWNrVG9QbGF5IHx8XG4gICAgICAgICAgICAod2luZG93Lm5hdmlnYXRvciAmJlxuICAgICAgICAgICAgICAvaVAoaG9uZXxvZHxhZCkvLnRlc3Qod2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSkpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBNYW51YWxseSB0cmlnZ2VyIHRoZSBwbGF5aW5nIGNhbGxiYWNrIGlmIGNsaWNrVG9QbGF5XG4gICAgICAgICAgLy8gaXMgZW5hYmxlZCBhbmQgdG8gd29ya2Fyb3VuZCBhIGxpbWl0YXRpb24gaW4gaU9TLFxuICAgICAgICAgIC8vIHdoaWNoIHJlcXVpcmVzIHN5bmNocm9ub3VzIHVzZXIgaW50ZXJhY3Rpb24gdG8gc3RhcnRcbiAgICAgICAgICAvLyB0aGUgdmlkZW8gcGxheWJhY2s6XG4gICAgICAgICAgdGhpcy5vblBsYXlpbmcoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheWVyLnBsYXlWaWRlbygpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGxheU9uUmVhZHkgPSB0cnVlXG4gICAgICAgIGlmICghKHdpbmRvdy5ZVCAmJiBZVC5QbGF5ZXIpKSB7XG4gICAgICAgICAgdGhpcy5sb2FkQVBJKClcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgICB0aGlzLnBsYXllciA9IG5ldyBZVC5QbGF5ZXIodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICB2aWRlb0lkOiB0aGlzLnZpZGVvSWQsXG4gICAgICAgICAgICBwbGF5ZXJWYXJzOiB0aGlzLnBsYXllclZhcnMsXG4gICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoYXQub25SZWFkeSgpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHRoYXQub25TdGF0ZUNoYW5nZShldmVudClcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhhdC5vbkVycm9yKGV2ZW50KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBwYXVzZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIucGF1c2VWaWRlbygpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGxheVN0YXR1cykge1xuICAgICAgICBkZWxldGUgdGhpcy5wbGF5T25SZWFkeVxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wYXVzZSgpXG4gICAgICAgIGRlbGV0ZSB0aGlzLnBsYXlTdGF0dXNcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgJC5leHRlbmQoZ2FsbGVyeVByb3RvdHlwZSwge1xuICAgIFlvdVR1YmVQbGF5ZXI6IFlvdVR1YmVQbGF5ZXIsXG5cbiAgICB0ZXh0RmFjdG9yeTogZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgICB2YXIgdmlkZW9JZCA9IHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgb3B0aW9ucy55b3VUdWJlVmlkZW9JZFByb3BlcnR5KVxuICAgICAgaWYgKHZpZGVvSWQpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgb3B0aW9ucy51cmxQcm9wZXJ0eSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG9ialtvcHRpb25zLnVybFByb3BlcnR5XSA9ICcvL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PScgKyB2aWRlb0lkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgb3B0aW9ucy52aWRlb1Bvc3RlclByb3BlcnR5KSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICkge1xuICAgICAgICAgIG9ialtvcHRpb25zLnZpZGVvUG9zdGVyUHJvcGVydHldID1cbiAgICAgICAgICAgICcvL2ltZy55b3V0dWJlLmNvbS92aS8nICsgdmlkZW9JZCArICcvbWF4cmVzZGVmYXVsdC5qcGcnXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9GYWN0b3J5KFxuICAgICAgICAgIG9iaixcbiAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICBuZXcgWW91VHViZVBsYXllcihcbiAgICAgICAgICAgIHZpZGVvSWQsXG4gICAgICAgICAgICBvcHRpb25zLnlvdVR1YmVQbGF5ZXJWYXJzLFxuICAgICAgICAgICAgb3B0aW9ucy55b3VUdWJlQ2xpY2tUb1BsYXlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0RmFjdG9yeS5jYWxsKHRoaXMsIG9iaiwgY2FsbGJhY2spXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBHYWxsZXJ5XG59KVxuIiwiLypcbiAqIGJsdWVpbXAgR2FsbGVyeSBKU1xuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvR2FsbGVyeVxuICpcbiAqIENvcHlyaWdodCAyMDEzLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogU3dpcGUgaW1wbGVtZW50YXRpb24gYmFzZWQgb25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9icmFkYmlyZHNhbGwvU3dpcGVcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbi8qIGdsb2JhbCBkZWZpbmUsIERvY3VtZW50VG91Y2ggKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAndXNlIHN0cmljdCdcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBBTUQgbW9kdWxlOlxuICAgIGRlZmluZShbJy4vYmx1ZWltcC1oZWxwZXInXSwgZmFjdG9yeSlcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHM6XG4gICAgd2luZG93LmJsdWVpbXAgPSB3aW5kb3cuYmx1ZWltcCB8fCB7fVxuICAgIHdpbmRvdy5ibHVlaW1wLkdhbGxlcnkgPSBmYWN0b3J5KHdpbmRvdy5ibHVlaW1wLmhlbHBlciB8fCB3aW5kb3cualF1ZXJ5KVxuICB9XG59KShmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCdcblxuICAvKipcbiAgICogR2FsbGVyeSBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtBcnJheXxOb2RlTGlzdH0gbGlzdCBHYWxsZXJ5IGNvbnRlbnRcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBHYWxsZXJ5IG9wdGlvbnNcbiAgICogQHJldHVybnMge29iamVjdH0gR2FsbGVyeSBvYmplY3RcbiAgICovXG4gIGZ1bmN0aW9uIEdhbGxlcnkobGlzdCwgb3B0aW9ucykge1xuICAgIGlmIChkb2N1bWVudC5ib2R5LnN0eWxlLm1heEhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLm1heEhlaWdodCBpcyB1bmRlZmluZWQgb24gSUU2IGFuZCBsb3dlclxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgaWYgKCF0aGlzIHx8IHRoaXMub3B0aW9ucyAhPT0gR2FsbGVyeS5wcm90b3R5cGUub3B0aW9ucykge1xuICAgICAgLy8gQ2FsbGVkIGFzIGZ1bmN0aW9uIGluc3RlYWQgb2YgYXMgY29uc3RydWN0b3IsXG4gICAgICAvLyBzbyB3ZSBzaW1wbHkgcmV0dXJuIGEgbmV3IGluc3RhbmNlOlxuICAgICAgcmV0dXJuIG5ldyBHYWxsZXJ5KGxpc3QsIG9wdGlvbnMpXG4gICAgfVxuICAgIGlmICghbGlzdCB8fCAhbGlzdC5sZW5ndGgpIHtcbiAgICAgIHRoaXMuY29uc29sZS5sb2coXG4gICAgICAgICdibHVlaW1wIEdhbGxlcnk6IE5vIG9yIGVtcHR5IGxpc3QgcHJvdmlkZWQgYXMgZmlyc3QgYXJndW1lbnQuJyxcbiAgICAgICAgbGlzdFxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMubGlzdCA9IGxpc3RcbiAgICB0aGlzLm51bSA9IGxpc3QubGVuZ3RoXG4gICAgdGhpcy5pbml0T3B0aW9ucyhvcHRpb25zKVxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpXG4gIH1cblxuICAkLmV4dGVuZChHYWxsZXJ5LnByb3RvdHlwZSwge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIC8vIFRoZSBJZCwgZWxlbWVudCBvciBxdWVyeVNlbGVjdG9yIG9mIHRoZSBnYWxsZXJ5IHdpZGdldDpcbiAgICAgIGNvbnRhaW5lcjogJyNibHVlaW1wLWdhbGxlcnknLFxuICAgICAgLy8gVGhlIHRhZyBuYW1lLCBJZCwgZWxlbWVudCBvciBxdWVyeVNlbGVjdG9yIG9mIHRoZSBzbGlkZXMgY29udGFpbmVyOlxuICAgICAgc2xpZGVzQ29udGFpbmVyOiAnZGl2JyxcbiAgICAgIC8vIFRoZSB0YWcgbmFtZSwgSWQsIGVsZW1lbnQgb3IgcXVlcnlTZWxlY3RvciBvZiB0aGUgdGl0bGUgZWxlbWVudDpcbiAgICAgIHRpdGxlRWxlbWVudDogJ2gzJyxcbiAgICAgIC8vIFRoZSBjbGFzcyB0byBhZGQgd2hlbiB0aGUgZ2FsbGVyeSBpcyB2aXNpYmxlOlxuICAgICAgZGlzcGxheUNsYXNzOiAnYmx1ZWltcC1nYWxsZXJ5LWRpc3BsYXknLFxuICAgICAgLy8gVGhlIGNsYXNzIHRvIGFkZCB3aGVuIHRoZSBnYWxsZXJ5IGNvbnRyb2xzIGFyZSB2aXNpYmxlOlxuICAgICAgY29udHJvbHNDbGFzczogJ2JsdWVpbXAtZ2FsbGVyeS1jb250cm9scycsXG4gICAgICAvLyBUaGUgY2xhc3MgdG8gYWRkIHdoZW4gdGhlIGdhbGxlcnkgb25seSBkaXNwbGF5cyBvbmUgZWxlbWVudDpcbiAgICAgIHNpbmdsZUNsYXNzOiAnYmx1ZWltcC1nYWxsZXJ5LXNpbmdsZScsXG4gICAgICAvLyBUaGUgY2xhc3MgdG8gYWRkIHdoZW4gdGhlIGxlZnQgZWRnZSBoYXMgYmVlbiByZWFjaGVkOlxuICAgICAgbGVmdEVkZ2VDbGFzczogJ2JsdWVpbXAtZ2FsbGVyeS1sZWZ0JyxcbiAgICAgIC8vIFRoZSBjbGFzcyB0byBhZGQgd2hlbiB0aGUgcmlnaHQgZWRnZSBoYXMgYmVlbiByZWFjaGVkOlxuICAgICAgcmlnaHRFZGdlQ2xhc3M6ICdibHVlaW1wLWdhbGxlcnktcmlnaHQnLFxuICAgICAgLy8gVGhlIGNsYXNzIHRvIGFkZCB3aGVuIHRoZSBhdXRvbWF0aWMgc2xpZGVzaG93IGlzIGFjdGl2ZTpcbiAgICAgIHBsYXlpbmdDbGFzczogJ2JsdWVpbXAtZ2FsbGVyeS1wbGF5aW5nJyxcbiAgICAgIC8vIFRoZSBjbGFzcyBmb3IgYWxsIHNsaWRlczpcbiAgICAgIHNsaWRlQ2xhc3M6ICdzbGlkZScsXG4gICAgICAvLyBUaGUgc2xpZGUgY2xhc3MgZm9yIGxvYWRpbmcgZWxlbWVudHM6XG4gICAgICBzbGlkZUxvYWRpbmdDbGFzczogJ3NsaWRlLWxvYWRpbmcnLFxuICAgICAgLy8gVGhlIHNsaWRlIGNsYXNzIGZvciBlbGVtZW50cyB0aGF0IGZhaWxlZCB0byBsb2FkOlxuICAgICAgc2xpZGVFcnJvckNsYXNzOiAnc2xpZGUtZXJyb3InLFxuICAgICAgLy8gVGhlIGNsYXNzIGZvciB0aGUgY29udGVudCBlbGVtZW50IGxvYWRlZCBpbnRvIGVhY2ggc2xpZGU6XG4gICAgICBzbGlkZUNvbnRlbnRDbGFzczogJ3NsaWRlLWNvbnRlbnQnLFxuICAgICAgLy8gVGhlIGNsYXNzIGZvciB0aGUgXCJ0b2dnbGVcIiBjb250cm9sOlxuICAgICAgdG9nZ2xlQ2xhc3M6ICd0b2dnbGUnLFxuICAgICAgLy8gVGhlIGNsYXNzIGZvciB0aGUgXCJwcmV2XCIgY29udHJvbDpcbiAgICAgIHByZXZDbGFzczogJ3ByZXYnLFxuICAgICAgLy8gVGhlIGNsYXNzIGZvciB0aGUgXCJuZXh0XCIgY29udHJvbDpcbiAgICAgIG5leHRDbGFzczogJ25leHQnLFxuICAgICAgLy8gVGhlIGNsYXNzIGZvciB0aGUgXCJjbG9zZVwiIGNvbnRyb2w6XG4gICAgICBjbG9zZUNsYXNzOiAnY2xvc2UnLFxuICAgICAgLy8gVGhlIGNsYXNzIGZvciB0aGUgXCJwbGF5LXBhdXNlXCIgdG9nZ2xlIGNvbnRyb2w6XG4gICAgICBwbGF5UGF1c2VDbGFzczogJ3BsYXktcGF1c2UnLFxuICAgICAgLy8gVGhlIGxpc3Qgb2JqZWN0IHByb3BlcnR5IChvciBkYXRhIGF0dHJpYnV0ZSkgd2l0aCB0aGUgb2JqZWN0IHR5cGU6XG4gICAgICB0eXBlUHJvcGVydHk6ICd0eXBlJyxcbiAgICAgIC8vIFRoZSBsaXN0IG9iamVjdCBwcm9wZXJ0eSAob3IgZGF0YSBhdHRyaWJ1dGUpIHdpdGggdGhlIG9iamVjdCB0aXRsZTpcbiAgICAgIHRpdGxlUHJvcGVydHk6ICd0aXRsZScsXG4gICAgICAvLyBUaGUgbGlzdCBvYmplY3QgcHJvcGVydHkgKG9yIGRhdGEgYXR0cmlidXRlKSB3aXRoIHRoZSBvYmplY3QgYWx0IHRleHQ6XG4gICAgICBhbHRUZXh0UHJvcGVydHk6ICdhbHQnLFxuICAgICAgLy8gVGhlIGxpc3Qgb2JqZWN0IHByb3BlcnR5IChvciBkYXRhIGF0dHJpYnV0ZSkgd2l0aCB0aGUgb2JqZWN0IFVSTDpcbiAgICAgIHVybFByb3BlcnR5OiAnaHJlZicsXG4gICAgICAvLyBUaGUgbGlzdCBvYmplY3QgcHJvcGVydHkgKG9yIGRhdGEgYXR0cmlidXRlKSB3aXRoIHRoZSBvYmplY3Qgc3Jjc2V0IFVSTChzKTpcbiAgICAgIHNyY3NldFByb3BlcnR5OiAndXJsc2V0JyxcbiAgICAgIC8vIFRoZSBnYWxsZXJ5IGxpc3RlbnMgZm9yIHRyYW5zaXRpb25lbmQgZXZlbnRzIGJlZm9yZSB0cmlnZ2VyaW5nIHRoZVxuICAgICAgLy8gb3BlbmVkIGFuZCBjbG9zZWQgZXZlbnRzLCB1bmxlc3MgdGhlIGZvbGxvd2luZyBvcHRpb24gaXMgc2V0IHRvIGZhbHNlOlxuICAgICAgZGlzcGxheVRyYW5zaXRpb246IHRydWUsXG4gICAgICAvLyBEZWZpbmVzIGlmIHRoZSBnYWxsZXJ5IHNsaWRlcyBhcmUgY2xlYXJlZCBmcm9tIHRoZSBnYWxsZXJ5IG1vZGFsLFxuICAgICAgLy8gb3IgcmV1c2VkIGZvciB0aGUgbmV4dCBnYWxsZXJ5IGluaXRpYWxpemF0aW9uOlxuICAgICAgY2xlYXJTbGlkZXM6IHRydWUsXG4gICAgICAvLyBEZWZpbmVzIGlmIGltYWdlcyBzaG91bGQgYmUgc3RyZXRjaGVkIHRvIGZpbGwgdGhlIGF2YWlsYWJsZSBzcGFjZSxcbiAgICAgIC8vIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGFzcGVjdCByYXRpbyAod2lsbCBvbmx5IGJlIGVuYWJsZWQgZm9yIGJyb3dzZXJzXG4gICAgICAvLyBzdXBwb3J0aW5nIGJhY2tncm91bmQtc2l6ZT1cImNvbnRhaW5cIiwgd2hpY2ggZXhjbHVkZXMgSUUgPCA5KS5cbiAgICAgIC8vIFNldCB0byBcImNvdmVyXCIsIHRvIG1ha2UgaW1hZ2VzIGNvdmVyIGFsbCBhdmFpbGFibGUgc3BhY2UgKHJlcXVpcmVzXG4gICAgICAvLyBzdXBwb3J0IGZvciBiYWNrZ3JvdW5kLXNpemU9XCJjb3ZlclwiLCB3aGljaCBleGNsdWRlcyBJRSA8IDkpOlxuICAgICAgc3RyZXRjaEltYWdlczogZmFsc2UsXG4gICAgICAvLyBUb2dnbGUgdGhlIGNvbnRyb2xzIG9uIHByZXNzaW5nIHRoZSBSZXR1cm4ga2V5OlxuICAgICAgdG9nZ2xlQ29udHJvbHNPblJldHVybjogdHJ1ZSxcbiAgICAgIC8vIFRvZ2dsZSB0aGUgY29udHJvbHMgb24gc2xpZGUgY2xpY2s6XG4gICAgICB0b2dnbGVDb250cm9sc09uU2xpZGVDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvZ2dsZSB0aGUgYXV0b21hdGljIHNsaWRlc2hvdyBpbnRlcnZhbCBvbiBwcmVzc2luZyB0aGUgU3BhY2Uga2V5OlxuICAgICAgdG9nZ2xlU2xpZGVzaG93T25TcGFjZTogdHJ1ZSxcbiAgICAgIC8vIE5hdmlnYXRlIHRoZSBnYWxsZXJ5IGJ5IHByZXNzaW5nIGxlZnQgYW5kIHJpZ2h0IG9uIHRoZSBrZXlib2FyZDpcbiAgICAgIGVuYWJsZUtleWJvYXJkTmF2aWdhdGlvbjogdHJ1ZSxcbiAgICAgIC8vIENsb3NlIHRoZSBnYWxsZXJ5IG9uIHByZXNzaW5nIHRoZSBFc2Mga2V5OlxuICAgICAgY2xvc2VPbkVzY2FwZTogdHJ1ZSxcbiAgICAgIC8vIENsb3NlIHRoZSBnYWxsZXJ5IHdoZW4gY2xpY2tpbmcgb24gYW4gZW1wdHkgc2xpZGUgYXJlYTpcbiAgICAgIGNsb3NlT25TbGlkZUNsaWNrOiB0cnVlLFxuICAgICAgLy8gQ2xvc2UgdGhlIGdhbGxlcnkgYnkgc3dpcGluZyB1cCBvciBkb3duOlxuICAgICAgY2xvc2VPblN3aXBlVXBPckRvd246IHRydWUsXG4gICAgICAvLyBDbG9zZSB0aGUgZ2FsbGVyeSB3aGVuIFVSTCBjaGFuZ2VzOlxuICAgICAgY2xvc2VPbkhhc2hDaGFuZ2U6IHRydWUsXG4gICAgICAvLyBFbXVsYXRlIHRvdWNoIGV2ZW50cyBvbiBtb3VzZS1wb2ludGVyIGRldmljZXMgc3VjaCBhcyBkZXNrdG9wIGJyb3dzZXJzOlxuICAgICAgZW11bGF0ZVRvdWNoRXZlbnRzOiB0cnVlLFxuICAgICAgLy8gU3RvcCB0b3VjaCBldmVudHMgZnJvbSBidWJibGluZyB1cCB0byBhbmNlc3RvciBlbGVtZW50cyBvZiB0aGUgR2FsbGVyeTpcbiAgICAgIHN0b3BUb3VjaEV2ZW50c1Byb3BhZ2F0aW9uOiBmYWxzZSxcbiAgICAgIC8vIEhpZGUgdGhlIHBhZ2Ugc2Nyb2xsYmFyczpcbiAgICAgIGhpZGVQYWdlU2Nyb2xsYmFyczogdHJ1ZSxcbiAgICAgIC8vIFN0b3BzIGFueSB0b3VjaGVzIG9uIHRoZSBjb250YWluZXIgZnJvbSBzY3JvbGxpbmcgdGhlIHBhZ2U6XG4gICAgICBkaXNhYmxlU2Nyb2xsOiB0cnVlLFxuICAgICAgLy8gQ2Fyb3VzZWwgbW9kZSAoc2hvcnRjdXQgZm9yIGNhcm91c2VsIHNwZWNpZmljIG9wdGlvbnMpOlxuICAgICAgY2Fyb3VzZWw6IGZhbHNlLFxuICAgICAgLy8gQWxsb3cgY29udGludW91cyBuYXZpZ2F0aW9uLCBtb3ZpbmcgZnJvbSBsYXN0IHRvIGZpcnN0XG4gICAgICAvLyBhbmQgZnJvbSBmaXJzdCB0byBsYXN0IHNsaWRlOlxuICAgICAgY29udGludW91czogdHJ1ZSxcbiAgICAgIC8vIFJlbW92ZSBlbGVtZW50cyBvdXRzaWRlIG9mIHRoZSBwcmVsb2FkIHJhbmdlIGZyb20gdGhlIERPTTpcbiAgICAgIHVubG9hZEVsZW1lbnRzOiB0cnVlLFxuICAgICAgLy8gU3RhcnQgd2l0aCB0aGUgYXV0b21hdGljIHNsaWRlc2hvdzpcbiAgICAgIHN0YXJ0U2xpZGVzaG93OiBmYWxzZSxcbiAgICAgIC8vIERlbGF5IGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHNsaWRlcyBmb3IgdGhlIGF1dG9tYXRpYyBzbGlkZXNob3c6XG4gICAgICBzbGlkZXNob3dJbnRlcnZhbDogNTAwMCxcbiAgICAgIC8vIFRoZSBkaXJlY3Rpb24gdGhlIHNsaWRlcyBhcmUgbW92aW5nOiBsdHI9TGVmdFRvUmlnaHQgb3IgcnRsPVJpZ2h0VG9MZWZ0XG4gICAgICBzbGlkZXNob3dEaXJlY3Rpb246ICdsdHInLFxuICAgICAgLy8gVGhlIHN0YXJ0aW5nIGluZGV4IGFzIGludGVnZXIuXG4gICAgICAvLyBDYW4gYWxzbyBiZSBhbiBvYmplY3Qgb2YgdGhlIGdpdmVuIGxpc3QsXG4gICAgICAvLyBvciBhbiBlcXVhbCBvYmplY3Qgd2l0aCB0aGUgc2FtZSB1cmwgcHJvcGVydHk6XG4gICAgICBpbmRleDogMCxcbiAgICAgIC8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gbG9hZCBhcm91bmQgdGhlIGN1cnJlbnQgaW5kZXg6XG4gICAgICBwcmVsb2FkUmFuZ2U6IDIsXG4gICAgICAvLyBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBiZXR3ZWVuIHNsaWRlIGNoYW5nZXMgaW4gbWlsbGlzZWNvbmRzOlxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAzMDAsXG4gICAgICAvLyBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBmb3IgYXV0b21hdGljIHNsaWRlIGNoYW5nZXMsIHNldCB0byBhbiBpbnRlZ2VyXG4gICAgICAvLyBncmVhdGVyIDAgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgdHJhbnNpdGlvbiBkdXJhdGlvbjpcbiAgICAgIHNsaWRlc2hvd1RyYW5zaXRpb25EdXJhdGlvbjogNTAwLFxuICAgICAgLy8gVGhlIGV2ZW50IG9iamVjdCBmb3Igd2hpY2ggdGhlIGRlZmF1bHQgYWN0aW9uIHdpbGwgYmUgY2FuY2VsZWRcbiAgICAgIC8vIG9uIEdhbGxlcnkgaW5pdGlhbGl6YXRpb24gKGUuZy4gdGhlIGNsaWNrIGV2ZW50IHRvIG9wZW4gdGhlIEdhbGxlcnkpOlxuICAgICAgZXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIGV4ZWN1dGVkIHdoZW4gdGhlIEdhbGxlcnkgaXMgaW5pdGlhbGl6ZWQuXG4gICAgICAvLyBJcyBjYWxsZWQgd2l0aCB0aGUgZ2FsbGVyeSBpbnN0YW5jZSBhcyBcInRoaXNcIiBvYmplY3Q6XG4gICAgICBvbm9wZW46IHVuZGVmaW5lZCxcbiAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIGV4ZWN1dGVkIHdoZW4gdGhlIEdhbGxlcnkgaGFzIGJlZW4gaW5pdGlhbGl6ZWRcbiAgICAgIC8vIGFuZCB0aGUgaW5pdGlhbGl6YXRpb24gdHJhbnNpdGlvbiBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gICAgICAvLyBJcyBjYWxsZWQgd2l0aCB0aGUgZ2FsbGVyeSBpbnN0YW5jZSBhcyBcInRoaXNcIiBvYmplY3Q6XG4gICAgICBvbm9wZW5lZDogdW5kZWZpbmVkLFxuICAgICAgLy8gQ2FsbGJhY2sgZnVuY3Rpb24gZXhlY3V0ZWQgb24gc2xpZGUgY2hhbmdlLlxuICAgICAgLy8gSXMgY2FsbGVkIHdpdGggdGhlIGdhbGxlcnkgaW5zdGFuY2UgYXMgXCJ0aGlzXCIgb2JqZWN0IGFuZCB0aGVcbiAgICAgIC8vIGN1cnJlbnQgaW5kZXggYW5kIHNsaWRlIGFzIGFyZ3VtZW50czpcbiAgICAgIG9uc2xpZGU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIGV4ZWN1dGVkIGFmdGVyIHRoZSBzbGlkZSBjaGFuZ2UgdHJhbnNpdGlvbi5cbiAgICAgIC8vIElzIGNhbGxlZCB3aXRoIHRoZSBnYWxsZXJ5IGluc3RhbmNlIGFzIFwidGhpc1wiIG9iamVjdCBhbmQgdGhlXG4gICAgICAvLyBjdXJyZW50IGluZGV4IGFuZCBzbGlkZSBhcyBhcmd1bWVudHM6XG4gICAgICBvbnNsaWRlZW5kOiB1bmRlZmluZWQsXG4gICAgICAvLyBDYWxsYmFjayBmdW5jdGlvbiBleGVjdXRlZCBvbiBzbGlkZSBjb250ZW50IGxvYWQuXG4gICAgICAvLyBJcyBjYWxsZWQgd2l0aCB0aGUgZ2FsbGVyeSBpbnN0YW5jZSBhcyBcInRoaXNcIiBvYmplY3QgYW5kIHRoZVxuICAgICAgLy8gc2xpZGUgaW5kZXggYW5kIHNsaWRlIGVsZW1lbnQgYXMgYXJndW1lbnRzOlxuICAgICAgb25zbGlkZWNvbXBsZXRlOiB1bmRlZmluZWQsXG4gICAgICAvLyBDYWxsYmFjayBmdW5jdGlvbiBleGVjdXRlZCB3aGVuIHRoZSBHYWxsZXJ5IGlzIGFib3V0IHRvIGJlIGNsb3NlZC5cbiAgICAgIC8vIElzIGNhbGxlZCB3aXRoIHRoZSBnYWxsZXJ5IGluc3RhbmNlIGFzIFwidGhpc1wiIG9iamVjdDpcbiAgICAgIG9uY2xvc2U6IHVuZGVmaW5lZCxcbiAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIGV4ZWN1dGVkIHdoZW4gdGhlIEdhbGxlcnkgaGFzIGJlZW4gY2xvc2VkXG4gICAgICAvLyBhbmQgdGhlIGNsb3NpbmcgdHJhbnNpdGlvbiBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gICAgICAvLyBJcyBjYWxsZWQgd2l0aCB0aGUgZ2FsbGVyeSBpbnN0YW5jZSBhcyBcInRoaXNcIiBvYmplY3Q6XG4gICAgICBvbmNsb3NlZDogdW5kZWZpbmVkXG4gICAgfSxcblxuICAgIGNhcm91c2VsT3B0aW9uczoge1xuICAgICAgaGlkZVBhZ2VTY3JvbGxiYXJzOiBmYWxzZSxcbiAgICAgIHRvZ2dsZUNvbnRyb2xzT25SZXR1cm46IGZhbHNlLFxuICAgICAgdG9nZ2xlU2xpZGVzaG93T25TcGFjZTogZmFsc2UsXG4gICAgICBlbmFibGVLZXlib2FyZE5hdmlnYXRpb246IGZhbHNlLFxuICAgICAgY2xvc2VPbkVzY2FwZTogZmFsc2UsXG4gICAgICBjbG9zZU9uU2xpZGVDbGljazogZmFsc2UsXG4gICAgICBjbG9zZU9uU3dpcGVVcE9yRG93bjogZmFsc2UsXG4gICAgICBkaXNhYmxlU2Nyb2xsOiBmYWxzZSxcbiAgICAgIHN0YXJ0U2xpZGVzaG93OiB0cnVlXG4gICAgfSxcblxuICAgIGNvbnNvbGU6XG4gICAgICB3aW5kb3cuY29uc29sZSAmJiB0eXBlb2Ygd2luZG93LmNvbnNvbGUubG9nID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gd2luZG93LmNvbnNvbGVcbiAgICAgICAgOiB7IGxvZzogZnVuY3Rpb24gKCkge30gfSxcblxuICAgIC8vIERldGVjdCB0b3VjaCwgdHJhbnNpdGlvbiwgdHJhbnNmb3JtIGFuZCBiYWNrZ3JvdW5kLXNpemUgc3VwcG9ydDpcbiAgICBzdXBwb3J0OiAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHZhciBzdXBwb3J0ID0ge1xuICAgICAgICB0b3VjaDpcbiAgICAgICAgICB3aW5kb3cub250b3VjaHN0YXJ0ICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAod2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFRvdWNoKVxuICAgICAgfVxuICAgICAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICAgICB3ZWJraXRUcmFuc2l0aW9uOiB7XG4gICAgICAgICAgZW5kOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICAgcHJlZml4OiAnLXdlYmtpdC0nXG4gICAgICAgIH0sXG4gICAgICAgIE1velRyYW5zaXRpb246IHtcbiAgICAgICAgICBlbmQ6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgICBwcmVmaXg6ICctbW96LSdcbiAgICAgICAgfSxcbiAgICAgICAgT1RyYW5zaXRpb246IHtcbiAgICAgICAgICBlbmQ6ICdvdHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICAgcHJlZml4OiAnLW8tJ1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgICAgZW5kOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICAgcHJlZml4OiAnJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFxuICAgICAgZm9yIChwcm9wIGluIHRyYW5zaXRpb25zKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodHJhbnNpdGlvbnMsIHByb3ApICYmXG4gICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICkge1xuICAgICAgICAgIHN1cHBvcnQudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25zW3Byb3BdXG4gICAgICAgICAgc3VwcG9ydC50cmFuc2l0aW9uLm5hbWUgPSBwcm9wXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBUZXN0cyBicm93c2VyIHN1cHBvcnRcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZWxlbWVudFRlc3RzKCkge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IHN1cHBvcnQudHJhbnNpdGlvblxuICAgICAgICB2YXIgcHJvcFxuICAgICAgICB2YXIgdHJhbnNsYXRlWlxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgcHJvcCA9IHRyYW5zaXRpb24ubmFtZS5zbGljZSgwLCAtOSkgKyAncmFuc2Zvcm0nXG4gICAgICAgICAgaWYgKGVsZW1lbnQuc3R5bGVbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9ICd0cmFuc2xhdGVaKDApJ1xuICAgICAgICAgICAgdHJhbnNsYXRlWiA9IHdpbmRvd1xuICAgICAgICAgICAgICAuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVxuICAgICAgICAgICAgICAuZ2V0UHJvcGVydHlWYWx1ZSh0cmFuc2l0aW9uLnByZWZpeCArICd0cmFuc2Zvcm0nKVxuICAgICAgICAgICAgc3VwcG9ydC50cmFuc2Zvcm0gPSB7XG4gICAgICAgICAgICAgIHByZWZpeDogdHJhbnNpdGlvbi5wcmVmaXgsXG4gICAgICAgICAgICAgIG5hbWU6IHByb3AsXG4gICAgICAgICAgICAgIHRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgdHJhbnNsYXRlWjogISF0cmFuc2xhdGVaICYmIHRyYW5zbGF0ZVogIT09ICdub25lJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3VwcG9ydC5iYWNrZ3JvdW5kU2l6ZSA9IHt9XG4gICAgICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9ICdjb250YWluJ1xuICAgICAgICAgIHN1cHBvcnQuYmFja2dyb3VuZFNpemUuY29udGFpbiA9XG4gICAgICAgICAgICB3aW5kb3dcbiAgICAgICAgICAgICAgLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgICAgICAgICAgICAgLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQtc2l6ZScpID09PSAnY29udGFpbidcbiAgICAgICAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRTaXplID0gJ2NvdmVyJ1xuICAgICAgICAgIHN1cHBvcnQuYmFja2dyb3VuZFNpemUuY292ZXIgPVxuICAgICAgICAgICAgd2luZG93XG4gICAgICAgICAgICAgIC5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG4gICAgICAgICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLXNpemUnKSA9PT0gJ2NvdmVyJ1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudClcbiAgICAgIH1cbiAgICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIGVsZW1lbnRUZXN0cygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGRvY3VtZW50KS5vbignRE9NQ29udGVudExvYWRlZCcsIGVsZW1lbnRUZXN0cylcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBwb3J0XG4gICAgICAvLyBUZXN0IGVsZW1lbnQsIGhhcyB0byBiZSBzdGFuZGFyZCBIVE1MIGFuZCBtdXN0IG5vdCBiZSBoaWRkZW5cbiAgICAgIC8vIGZvciB0aGUgQ1NTMyB0ZXN0cyB1c2luZyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSB0byBiZSBhcHBsaWNhYmxlOlxuICAgIH0pKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSxcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTpcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZTpcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93LndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUsXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmluaXRTdGFydEluZGV4KClcbiAgICAgIGlmICh0aGlzLmluaXRXaWRnZXQoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICB0aGlzLmluaXRFdmVudExpc3RlbmVycygpXG4gICAgICAvLyBMb2FkIHRoZSBzbGlkZSBhdCB0aGUgZ2l2ZW4gaW5kZXg6XG4gICAgICB0aGlzLm9uc2xpZGUodGhpcy5pbmRleClcbiAgICAgIC8vIE1hbnVhbGx5IHRyaWdnZXIgdGhlIHNsaWRlZW5kIGV2ZW50IGZvciB0aGUgaW5pdGlhbCBzbGlkZTpcbiAgICAgIHRoaXMub250cmFuc2l0aW9uZW5kKClcbiAgICAgIC8vIFN0YXJ0IHRoZSBhdXRvbWF0aWMgc2xpZGVzaG93IGlmIGFwcGxpY2FibGU6XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN0YXJ0U2xpZGVzaG93KSB7XG4gICAgICAgIHRoaXMucGxheSgpXG4gICAgICB9XG4gICAgfSxcblxuICAgIHNsaWRlOiBmdW5jdGlvbiAodG8sIGR1cmF0aW9uKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhcbiAgICAgIHZhciBkaXJlY3Rpb25cbiAgICAgIHZhciBuYXR1cmFsRGlyZWN0aW9uXG4gICAgICB2YXIgZGlmZlxuICAgICAgaWYgKGluZGV4ID09PSB0byB8fCB0aGlzLm51bSA9PT0gMSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZHVyYXRpb24gPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdXBwb3J0LnRyYW5zZm9ybSkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5jb250aW51b3VzKSB7XG4gICAgICAgICAgdG8gPSB0aGlzLmNpcmNsZSh0bylcbiAgICAgICAgfVxuICAgICAgICAvLyAxOiBiYWNrd2FyZCwgLTE6IGZvcndhcmQ6XG4gICAgICAgIGRpcmVjdGlvbiA9IE1hdGguYWJzKGluZGV4IC0gdG8pIC8gKGluZGV4IC0gdG8pXG4gICAgICAgIC8vIEdldCB0aGUgYWN0dWFsIHBvc2l0aW9uIG9mIHRoZSBzbGlkZTpcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250aW51b3VzKSB7XG4gICAgICAgICAgbmF0dXJhbERpcmVjdGlvbiA9IGRpcmVjdGlvblxuICAgICAgICAgIGRpcmVjdGlvbiA9IC10aGlzLnBvc2l0aW9uc1t0aGlzLmNpcmNsZSh0byldIC8gdGhpcy5zbGlkZVdpZHRoXG4gICAgICAgICAgLy8gSWYgZ29pbmcgZm9yd2FyZCBidXQgdG8gPCBpbmRleCwgdXNlIHRvID0gc2xpZGVzLmxlbmd0aCArIHRvXG4gICAgICAgICAgLy8gSWYgZ29pbmcgYmFja3dhcmQgYnV0IHRvID4gaW5kZXgsIHVzZSB0byA9IC1zbGlkZXMubGVuZ3RoICsgdG9cbiAgICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSBuYXR1cmFsRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB0byA9IC1kaXJlY3Rpb24gKiB0aGlzLm51bSArIHRvXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRpZmYgPSBNYXRoLmFicyhpbmRleCAtIHRvKSAtIDFcbiAgICAgICAgLy8gTW92ZSBhbGwgdGhlIHNsaWRlcyBiZXR3ZWVuIGluZGV4IGFuZCB0byBpbiB0aGUgcmlnaHQgZGlyZWN0aW9uOlxuICAgICAgICB3aGlsZSAoZGlmZikge1xuICAgICAgICAgIGRpZmYgLT0gMVxuICAgICAgICAgIHRoaXMubW92ZShcbiAgICAgICAgICAgIHRoaXMuY2lyY2xlKCh0byA+IGluZGV4ID8gdG8gOiBpbmRleCkgLSBkaWZmIC0gMSksXG4gICAgICAgICAgICB0aGlzLnNsaWRlV2lkdGggKiBkaXJlY3Rpb24sXG4gICAgICAgICAgICAwXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHRvID0gdGhpcy5jaXJjbGUodG8pXG4gICAgICAgIHRoaXMubW92ZShpbmRleCwgdGhpcy5zbGlkZVdpZHRoICogZGlyZWN0aW9uLCBkdXJhdGlvbilcbiAgICAgICAgdGhpcy5tb3ZlKHRvLCAwLCBkdXJhdGlvbilcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250aW51b3VzKSB7XG4gICAgICAgICAgdGhpcy5tb3ZlKFxuICAgICAgICAgICAgdGhpcy5jaXJjbGUodG8gLSBkaXJlY3Rpb24pLFxuICAgICAgICAgICAgLSh0aGlzLnNsaWRlV2lkdGggKiBkaXJlY3Rpb24pLFxuICAgICAgICAgICAgMFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG8gPSB0aGlzLmNpcmNsZSh0bylcbiAgICAgICAgdGhpcy5hbmltYXRlKGluZGV4ICogLXRoaXMuc2xpZGVXaWR0aCwgdG8gKiAtdGhpcy5zbGlkZVdpZHRoLCBkdXJhdGlvbilcbiAgICAgIH1cbiAgICAgIHRoaXMub25zbGlkZSh0bylcbiAgICB9LFxuXG4gICAgZ2V0SW5kZXg6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4XG4gICAgfSxcblxuICAgIGdldE51bWJlcjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubnVtXG4gICAgfSxcblxuICAgIHByZXY6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGludW91cyB8fCB0aGlzLmluZGV4KSB7XG4gICAgICAgIHRoaXMuc2xpZGUodGhpcy5pbmRleCAtIDEpXG4gICAgICB9XG4gICAgfSxcblxuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGludW91cyB8fCB0aGlzLmluZGV4IDwgdGhpcy5udW0gLSAxKSB7XG4gICAgICAgIHRoaXMuc2xpZGUodGhpcy5pbmRleCArIDEpXG4gICAgICB9XG4gICAgfSxcblxuICAgIHBsYXk6IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgIHZhciBuZXh0SW5kZXggPVxuICAgICAgICB0aGlzLmluZGV4ICsgKHRoaXMub3B0aW9ucy5zbGlkZXNob3dEaXJlY3Rpb24gPT09ICdydGwnID8gLTEgOiAxKVxuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgICB0aGlzLmludGVydmFsID0gdGltZSB8fCB0aGlzLm9wdGlvbnMuc2xpZGVzaG93SW50ZXJ2YWxcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW3RoaXMuaW5kZXhdID4gMSkge1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLnNldFRpbWVvdXQoXG4gICAgICAgICAgKCF0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSAmJiB0aGlzLnNsaWRlKSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRvLCBkdXJhdGlvbikge1xuICAgICAgICAgICAgICB0aGF0LmFuaW1hdGlvbkZyYW1lSWQgPSB0aGF0LnJlcXVlc3RBbmltYXRpb25GcmFtZS5jYWxsKFxuICAgICAgICAgICAgICAgIHdpbmRvdyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGF0LnNsaWRlKHRvLCBkdXJhdGlvbilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgW25leHRJbmRleCwgdGhpcy5vcHRpb25zLnNsaWRlc2hvd1RyYW5zaXRpb25EdXJhdGlvbl0sXG4gICAgICAgICAgdGhpcy5pbnRlcnZhbFxuICAgICAgICApXG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucGxheWluZ0NsYXNzKVxuICAgIH0sXG5cbiAgICBwYXVzZTogZnVuY3Rpb24gKCkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgICB0aGlzLmludGVydmFsID0gbnVsbFxuICAgICAgaWYgKHRoaXMuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxBbmltYXRpb25GcmFtZS5jYWxsKHdpbmRvdywgdGhpcy5hbmltYXRpb25GcmFtZUlkKVxuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSWQgPSBudWxsXG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucGxheWluZ0NsYXNzKVxuICAgIH0sXG5cbiAgICBhZGQ6IGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICB2YXIgaVxuICAgICAgaWYgKCFsaXN0LmNvbmNhdCkge1xuICAgICAgICAvLyBNYWtlIGEgcmVhbCBhcnJheSBvdXQgb2YgdGhlIGxpc3QgdG8gYWRkOlxuICAgICAgICBsaXN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdClcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5saXN0LmNvbmNhdCkge1xuICAgICAgICAvLyBNYWtlIGEgcmVhbCBhcnJheSBvdXQgb2YgdGhlIEdhbGxlcnkgbGlzdDpcbiAgICAgICAgdGhpcy5saXN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5saXN0KVxuICAgICAgfVxuICAgICAgdGhpcy5saXN0ID0gdGhpcy5saXN0LmNvbmNhdChsaXN0KVxuICAgICAgdGhpcy5udW0gPSB0aGlzLmxpc3QubGVuZ3RoXG4gICAgICBpZiAodGhpcy5udW0gPiAyICYmIHRoaXMub3B0aW9ucy5jb250aW51b3VzID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jb250aW51b3VzID0gdHJ1ZVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGVmdEVkZ2VDbGFzcylcbiAgICAgIH1cbiAgICAgIHRoaXMuY29udGFpbmVyXG4gICAgICAgIC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRFZGdlQ2xhc3MpXG4gICAgICAgIC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuc2luZ2xlQ2xhc3MpXG4gICAgICBmb3IgKGkgPSB0aGlzLm51bSAtIGxpc3QubGVuZ3RoOyBpIDwgdGhpcy5udW07IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmFkZFNsaWRlKGkpXG4gICAgICAgIHRoaXMucG9zaXRpb25TbGlkZShpKVxuICAgICAgfVxuICAgICAgdGhpcy5wb3NpdGlvbnMubGVuZ3RoID0gdGhpcy5udW1cbiAgICAgIHRoaXMuaW5pdFNsaWRlcyh0cnVlKVxuICAgIH0sXG5cbiAgICByZXNldFNsaWRlczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5zbGlkZXNDb250YWluZXIuZW1wdHkoKVxuICAgICAgdGhpcy51bmxvYWRBbGxTbGlkZXMoKVxuICAgICAgdGhpcy5zbGlkZXMgPSBbXVxuICAgIH0sXG5cbiAgICBoYW5kbGVDbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcbiAgICAgIHRoaXMuZGVzdHJveUV2ZW50TGlzdGVuZXJzKClcbiAgICAgIC8vIENhbmNlbCB0aGUgc2xpZGVzaG93OlxuICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICB0aGlzLmNvbnRhaW5lclswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICB0aGlzLmNvbnRhaW5lclxuICAgICAgICAucmVtb3ZlQ2xhc3Mob3B0aW9ucy5kaXNwbGF5Q2xhc3MpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhvcHRpb25zLnNpbmdsZUNsYXNzKVxuICAgICAgICAucmVtb3ZlQ2xhc3Mob3B0aW9ucy5sZWZ0RWRnZUNsYXNzKVxuICAgICAgICAucmVtb3ZlQ2xhc3Mob3B0aW9ucy5yaWdodEVkZ2VDbGFzcylcbiAgICAgIGlmIChvcHRpb25zLmhpZGVQYWdlU2Nyb2xsYmFycykge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5ib2R5T3ZlcmZsb3dTdHlsZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGVhclNsaWRlcykge1xuICAgICAgICB0aGlzLnJlc2V0U2xpZGVzKClcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub25jbG9zZWQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9uY2xvc2VkLmNhbGwodGhpcylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgLyoqXG4gICAgICAgKiBDbG9zZSBoYW5kbGVyXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtldmVudH0gZXZlbnQgQ2xvc2UgZXZlbnRcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY2xvc2VIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoYXQuY29udGFpbmVyWzBdKSB7XG4gICAgICAgICAgdGhhdC5jb250YWluZXIub2ZmKHRoYXQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCwgY2xvc2VIYW5kbGVyKVxuICAgICAgICAgIHRoYXQuaGFuZGxlQ2xvc2UoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm9uY2xvc2UpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9uY2xvc2UuY2FsbCh0aGlzKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMub3B0aW9ucy5kaXNwbGF5VHJhbnNpdGlvbikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5vbih0aGlzLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsIGNsb3NlSGFuZGxlcilcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmRpc3BsYXlDbGFzcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xvc2UoKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjaXJjbGU6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgLy8gQWx3YXlzIHJldHVybiBhIG51bWJlciBpbnNpZGUgb2YgdGhlIHNsaWRlcyBpbmRleCByYW5nZTpcbiAgICAgIHJldHVybiAodGhpcy5udW0gKyAoaW5kZXggJSB0aGlzLm51bSkpICUgdGhpcy5udW1cbiAgICB9LFxuXG4gICAgbW92ZTogZnVuY3Rpb24gKGluZGV4LCBkaXN0LCBkdXJhdGlvbikge1xuICAgICAgdGhpcy50cmFuc2xhdGVYKGluZGV4LCBkaXN0LCBkdXJhdGlvbilcbiAgICAgIHRoaXMucG9zaXRpb25zW2luZGV4XSA9IGRpc3RcbiAgICB9LFxuXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAoaW5kZXgsIHgsIHksIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoIXRoaXMuc2xpZGVzW2luZGV4XSkgcmV0dXJuXG4gICAgICB2YXIgc3R5bGUgPSB0aGlzLnNsaWRlc1tpbmRleF0uc3R5bGVcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gdGhpcy5zdXBwb3J0LnRyYW5zaXRpb25cbiAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLnN1cHBvcnQudHJhbnNmb3JtXG4gICAgICBzdHlsZVt0cmFuc2l0aW9uLm5hbWUgKyAnRHVyYXRpb24nXSA9IGR1cmF0aW9uICsgJ21zJ1xuICAgICAgc3R5bGVbdHJhbnNmb3JtLm5hbWVdID1cbiAgICAgICAgJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgeCArXG4gICAgICAgICdweCwgJyArXG4gICAgICAgIHkgK1xuICAgICAgICAncHgpJyArXG4gICAgICAgICh0cmFuc2Zvcm0udHJhbnNsYXRlWiA/ICcgdHJhbnNsYXRlWigwKScgOiAnJylcbiAgICB9LFxuXG4gICAgdHJhbnNsYXRlWDogZnVuY3Rpb24gKGluZGV4LCB4LCBkdXJhdGlvbikge1xuICAgICAgdGhpcy50cmFuc2xhdGUoaW5kZXgsIHgsIDAsIGR1cmF0aW9uKVxuICAgIH0sXG5cbiAgICB0cmFuc2xhdGVZOiBmdW5jdGlvbiAoaW5kZXgsIHksIGR1cmF0aW9uKSB7XG4gICAgICB0aGlzLnRyYW5zbGF0ZShpbmRleCwgMCwgeSwgZHVyYXRpb24pXG4gICAgfSxcblxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uIChmcm9tLCB0bywgZHVyYXRpb24pIHtcbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5zbGlkZXNDb250YWluZXJbMF0uc3R5bGUubGVmdCA9IHRvICsgJ3B4J1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIHZhciB0aW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aW1lRWxhcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRcbiAgICAgICAgaWYgKHRpbWVFbGFwID4gZHVyYXRpb24pIHtcbiAgICAgICAgICB0aGF0LnNsaWRlc0NvbnRhaW5lclswXS5zdHlsZS5sZWZ0ID0gdG8gKyAncHgnXG4gICAgICAgICAgdGhhdC5vbnRyYW5zaXRpb25lbmQoKVxuICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVyKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHRoYXQuc2xpZGVzQ29udGFpbmVyWzBdLnN0eWxlLmxlZnQgPVxuICAgICAgICAgICh0byAtIGZyb20pICogKE1hdGguZmxvb3IoKHRpbWVFbGFwIC8gZHVyYXRpb24pICogMTAwKSAvIDEwMCkgK1xuICAgICAgICAgIGZyb20gK1xuICAgICAgICAgICdweCdcbiAgICAgIH0sIDQpXG4gICAgfSxcblxuICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlXG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlXG4gICAgICB9XG4gICAgfSxcblxuICAgIG9ucmVzaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmluaXRTbGlkZXModHJ1ZSlcbiAgICB9LFxuXG4gICAgb25oYXNoY2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25IYXNoQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbm1vdXNlZG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBUcmlnZ2VyIG9uIGNsaWNrcyBvZiB0aGUgbGVmdCBtb3VzZSBidXR0b24gb25seVxuICAgICAgLy8gYW5kIGV4Y2x1ZGUgdmlkZW8gJiBhdWRpbyBlbGVtZW50czpcbiAgICAgIGlmIChcbiAgICAgICAgZXZlbnQud2hpY2ggJiZcbiAgICAgICAgZXZlbnQud2hpY2ggPT09IDEgJiZcbiAgICAgICAgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lICE9PSAnVklERU8nICYmXG4gICAgICAgIGV2ZW50LnRhcmdldC5ub2RlTmFtZSAhPT0gJ0FVRElPJ1xuICAgICAgKSB7XG4gICAgICAgIC8vIFByZXZlbnRpbmcgdGhlIGRlZmF1bHQgbW91c2Vkb3duIGFjdGlvbiBpcyByZXF1aXJlZFxuICAgICAgICAvLyB0byBtYWtlIHRvdWNoIGVtdWxhdGlvbiB3b3JrIHdpdGggRmlyZWZveDpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICA7KGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQpLnRvdWNoZXMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGFnZVg6IGV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgcGFnZVk6IGV2ZW50LnBhZ2VZXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICAgIHRoaXMub250b3VjaHN0YXJ0KGV2ZW50KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbm1vdXNlbW92ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy50b3VjaFN0YXJ0KSB7XG4gICAgICAgIDsoZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudCkudG91Y2hlcyA9IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYWdlWDogZXZlbnQucGFnZVgsXG4gICAgICAgICAgICBwYWdlWTogZXZlbnQucGFnZVlcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgICAgdGhpcy5vbnRvdWNobW92ZShldmVudClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb25tb3VzZXVwOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLnRvdWNoU3RhcnQpIHtcbiAgICAgICAgdGhpcy5vbnRvdWNoZW5kKGV2ZW50KVxuICAgICAgICBkZWxldGUgdGhpcy50b3VjaFN0YXJ0XG4gICAgICB9XG4gICAgfSxcblxuICAgIG9ubW91c2VvdXQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHRoaXMudG91Y2hTdGFydCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0XG4gICAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldFxuICAgICAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhJC5jb250YWlucyh0YXJnZXQsIHJlbGF0ZWQpKSkge1xuICAgICAgICAgIHRoaXMub25tb3VzZXVwKGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIG9udG91Y2hzdGFydDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN0b3BUb3VjaEV2ZW50c1Byb3BhZ2F0aW9uKSB7XG4gICAgICAgIHRoaXMuc3RvcFByb3BhZ2F0aW9uKGV2ZW50KVxuICAgICAgfVxuICAgICAgLy8galF1ZXJ5IGRvZXNuJ3QgY29weSB0b3VjaCBldmVudCBwcm9wZXJ0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICAvLyBzbyB3ZSBoYXZlIHRvIGFjY2VzcyB0aGUgb3JpZ2luYWxFdmVudCBvYmplY3Q6XG4gICAgICB2YXIgdG91Y2ggPSAoZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudCkudG91Y2hlc1swXVxuICAgICAgdGhpcy50b3VjaFN0YXJ0ID0ge1xuICAgICAgICAvLyBSZW1lbWJlciB0aGUgaW5pdGlhbCB0b3VjaCBjb29yZGluYXRlczpcbiAgICAgICAgeDogdG91Y2gucGFnZVgsXG4gICAgICAgIHk6IHRvdWNoLnBhZ2VZLFxuICAgICAgICAvLyBTdG9yZSB0aGUgdGltZSB0byBkZXRlcm1pbmUgdG91Y2ggZHVyYXRpb246XG4gICAgICAgIHRpbWU6IERhdGUubm93KClcbiAgICAgIH1cbiAgICAgIC8vIEhlbHBlciB2YXJpYWJsZSB0byBkZXRlY3Qgc2Nyb2xsIG1vdmVtZW50OlxuICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IHVuZGVmaW5lZFxuICAgICAgLy8gUmVzZXQgZGVsdGEgdmFsdWVzOlxuICAgICAgdGhpcy50b3VjaERlbHRhID0ge31cbiAgICB9LFxuXG4gICAgb250b3VjaG1vdmU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdG9wVG91Y2hFdmVudHNQcm9wYWdhdGlvbikge1xuICAgICAgICB0aGlzLnN0b3BQcm9wYWdhdGlvbihldmVudClcbiAgICAgIH1cbiAgICAgIC8vIGpRdWVyeSBkb2Vzbid0IGNvcHkgdG91Y2ggZXZlbnQgcHJvcGVydGllcyBieSBkZWZhdWx0LFxuICAgICAgLy8gc28gd2UgaGF2ZSB0byBhY2Nlc3MgdGhlIG9yaWdpbmFsRXZlbnQgb2JqZWN0OlxuICAgICAgdmFyIHRvdWNoZXMgPSAoZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudCkudG91Y2hlc1xuICAgICAgdmFyIHRvdWNoID0gdG91Y2hlc1swXVxuICAgICAgdmFyIHNjYWxlID0gKGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQpLnNjYWxlXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4XG4gICAgICB2YXIgdG91Y2hEZWx0YVhcbiAgICAgIHZhciBpbmRpY2VzXG4gICAgICAvLyBFbnN1cmUgdGhpcyBpcyBhIG9uZSB0b3VjaCBzd2lwZSBhbmQgbm90LCBlLmcuIGEgcGluY2g6XG4gICAgICBpZiAodG91Y2hlcy5sZW5ndGggPiAxIHx8IChzY2FsZSAmJiBzY2FsZSAhPT0gMSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVTY3JvbGwpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuICAgICAgLy8gTWVhc3VyZSBjaGFuZ2UgaW4geCBhbmQgeSBjb29yZGluYXRlczpcbiAgICAgIHRoaXMudG91Y2hEZWx0YSA9IHtcbiAgICAgICAgeDogdG91Y2gucGFnZVggLSB0aGlzLnRvdWNoU3RhcnQueCxcbiAgICAgICAgeTogdG91Y2gucGFnZVkgLSB0aGlzLnRvdWNoU3RhcnQueVxuICAgICAgfVxuICAgICAgdG91Y2hEZWx0YVggPSB0aGlzLnRvdWNoRGVsdGEueFxuICAgICAgLy8gRGV0ZWN0IGlmIHRoaXMgaXMgYSB2ZXJ0aWNhbCBzY3JvbGwgbW92ZW1lbnQgKHJ1biBvbmx5IG9uY2UgcGVyIHRvdWNoKTpcbiAgICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9XG4gICAgICAgICAgdGhpcy5pc1Njcm9sbGluZyB8fFxuICAgICAgICAgIE1hdGguYWJzKHRvdWNoRGVsdGFYKSA8IE1hdGguYWJzKHRoaXMudG91Y2hEZWx0YS55KVxuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIC8vIEFsd2F5cyBwcmV2ZW50IGhvcml6b250YWwgc2Nyb2xsOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIC8vIFN0b3AgdGhlIHNsaWRlc2hvdzpcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGludW91cykge1xuICAgICAgICAgIGluZGljZXMgPSBbdGhpcy5jaXJjbGUoaW5kZXggKyAxKSwgaW5kZXgsIHRoaXMuY2lyY2xlKGluZGV4IC0gMSldXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSW5jcmVhc2UgcmVzaXN0YW5jZSBpZiBmaXJzdCBzbGlkZSBhbmQgc2xpZGluZyBsZWZ0XG4gICAgICAgICAgLy8gb3IgbGFzdCBzbGlkZSBhbmQgc2xpZGluZyByaWdodDpcbiAgICAgICAgICB0aGlzLnRvdWNoRGVsdGEueCA9IHRvdWNoRGVsdGFYID1cbiAgICAgICAgICAgIHRvdWNoRGVsdGFYIC9cbiAgICAgICAgICAgICgoIWluZGV4ICYmIHRvdWNoRGVsdGFYID4gMCkgfHxcbiAgICAgICAgICAgIChpbmRleCA9PT0gdGhpcy5udW0gLSAxICYmIHRvdWNoRGVsdGFYIDwgMClcbiAgICAgICAgICAgICAgPyBNYXRoLmFicyh0b3VjaERlbHRhWCkgLyB0aGlzLnNsaWRlV2lkdGggKyAxXG4gICAgICAgICAgICAgIDogMSlcbiAgICAgICAgICBpbmRpY2VzID0gW2luZGV4XVxuICAgICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGluZGV4IC0gMSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5udW0gLSAxKSB7XG4gICAgICAgICAgICBpbmRpY2VzLnVuc2hpZnQoaW5kZXggKyAxKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kaWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICBpbmRleCA9IGluZGljZXMucG9wKClcbiAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVgoaW5kZXgsIHRvdWNoRGVsdGFYICsgdGhpcy5wb3NpdGlvbnNbaW5kZXhdLCAwKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuY2Fyb3VzZWwpIHtcbiAgICAgICAgdGhpcy50cmFuc2xhdGVZKGluZGV4LCB0aGlzLnRvdWNoRGVsdGEueSArIHRoaXMucG9zaXRpb25zW2luZGV4XSwgMClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb250b3VjaGVuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN0b3BUb3VjaEV2ZW50c1Byb3BhZ2F0aW9uKSB7XG4gICAgICAgIHRoaXMuc3RvcFByb3BhZ2F0aW9uKGV2ZW50KVxuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleFxuICAgICAgdmFyIGFic1RvdWNoRGVsdGFYID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhLngpXG4gICAgICB2YXIgc2xpZGVXaWR0aCA9IHRoaXMuc2xpZGVXaWR0aFxuICAgICAgdmFyIGR1cmF0aW9uID0gTWF0aC5jZWlsKFxuICAgICAgICAodGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiAqICgxIC0gYWJzVG91Y2hEZWx0YVggLyBzbGlkZVdpZHRoKSkgL1xuICAgICAgICAgIDJcbiAgICAgIClcbiAgICAgIC8vIERldGVybWluZSBpZiBzbGlkZSBhdHRlbXB0IHRyaWdnZXJzIG5leHQvcHJldiBzbGlkZTpcbiAgICAgIHZhciBpc1ZhbGlkU2xpZGUgPSBhYnNUb3VjaERlbHRhWCA+IDIwXG4gICAgICAvLyBEZXRlcm1pbmUgaWYgc2xpZGUgYXR0ZW1wdCBpcyBwYXN0IHN0YXJ0IG9yIGVuZDpcbiAgICAgIHZhciBpc1Bhc3RCb3VuZHMgPVxuICAgICAgICAoIWluZGV4ICYmIHRoaXMudG91Y2hEZWx0YS54ID4gMCkgfHxcbiAgICAgICAgKGluZGV4ID09PSB0aGlzLm51bSAtIDEgJiYgdGhpcy50b3VjaERlbHRhLnggPCAwKVxuICAgICAgdmFyIGlzVmFsaWRDbG9zZSA9XG4gICAgICAgICFpc1ZhbGlkU2xpZGUgJiZcbiAgICAgICAgdGhpcy5vcHRpb25zLmNsb3NlT25Td2lwZVVwT3JEb3duICYmXG4gICAgICAgIE1hdGguYWJzKHRoaXMudG91Y2hEZWx0YS55KSA+IDIwXG4gICAgICB2YXIgZGlyZWN0aW9uXG4gICAgICB2YXIgaW5kZXhGb3J3YXJkXG4gICAgICB2YXIgaW5kZXhCYWNrd2FyZFxuICAgICAgdmFyIGRpc3RhbmNlRm9yd2FyZFxuICAgICAgdmFyIGRpc3RhbmNlQmFja3dhcmRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGludW91cykge1xuICAgICAgICBpc1Bhc3RCb3VuZHMgPSBmYWxzZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZXJtaW5lIGRpcmVjdGlvbiBvZiBzd2lwZSAodHJ1ZTogcmlnaHQsIGZhbHNlOiBsZWZ0KTpcbiAgICAgIGRpcmVjdGlvbiA9IHRoaXMudG91Y2hEZWx0YS54IDwgMCA/IC0xIDogMVxuICAgICAgaWYgKCF0aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkU2xpZGUgJiYgIWlzUGFzdEJvdW5kcykge1xuICAgICAgICAgIGluZGV4Rm9yd2FyZCA9IGluZGV4ICsgZGlyZWN0aW9uXG4gICAgICAgICAgaW5kZXhCYWNrd2FyZCA9IGluZGV4IC0gZGlyZWN0aW9uXG4gICAgICAgICAgZGlzdGFuY2VGb3J3YXJkID0gc2xpZGVXaWR0aCAqIGRpcmVjdGlvblxuICAgICAgICAgIGRpc3RhbmNlQmFja3dhcmQgPSAtc2xpZGVXaWR0aCAqIGRpcmVjdGlvblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGludW91cykge1xuICAgICAgICAgICAgdGhpcy5tb3ZlKHRoaXMuY2lyY2xlKGluZGV4Rm9yd2FyZCksIGRpc3RhbmNlRm9yd2FyZCwgMClcbiAgICAgICAgICAgIHRoaXMubW92ZSh0aGlzLmNpcmNsZShpbmRleCAtIDIgKiBkaXJlY3Rpb24pLCBkaXN0YW5jZUJhY2t3YXJkLCAwKVxuICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXhGb3J3YXJkID49IDAgJiYgaW5kZXhGb3J3YXJkIDwgdGhpcy5udW0pIHtcbiAgICAgICAgICAgIHRoaXMubW92ZShpbmRleEZvcndhcmQsIGRpc3RhbmNlRm9yd2FyZCwgMClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5tb3ZlKGluZGV4LCB0aGlzLnBvc2l0aW9uc1tpbmRleF0gKyBkaXN0YW5jZUZvcndhcmQsIGR1cmF0aW9uKVxuICAgICAgICAgIHRoaXMubW92ZShcbiAgICAgICAgICAgIHRoaXMuY2lyY2xlKGluZGV4QmFja3dhcmQpLFxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnNbdGhpcy5jaXJjbGUoaW5kZXhCYWNrd2FyZCldICsgZGlzdGFuY2VGb3J3YXJkLFxuICAgICAgICAgICAgZHVyYXRpb25cbiAgICAgICAgICApXG4gICAgICAgICAgaW5kZXggPSB0aGlzLmNpcmNsZShpbmRleEJhY2t3YXJkKVxuICAgICAgICAgIHRoaXMub25zbGlkZShpbmRleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBNb3ZlIGJhY2sgaW50byBwb3NpdGlvblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGludW91cykge1xuICAgICAgICAgICAgdGhpcy5tb3ZlKHRoaXMuY2lyY2xlKGluZGV4IC0gMSksIC1zbGlkZVdpZHRoLCBkdXJhdGlvbilcbiAgICAgICAgICAgIHRoaXMubW92ZShpbmRleCwgMCwgZHVyYXRpb24pXG4gICAgICAgICAgICB0aGlzLm1vdmUodGhpcy5jaXJjbGUoaW5kZXggKyAxKSwgc2xpZGVXaWR0aCwgZHVyYXRpb24pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgICAgICB0aGlzLm1vdmUoaW5kZXggLSAxLCAtc2xpZGVXaWR0aCwgZHVyYXRpb24pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vdmUoaW5kZXgsIDAsIGR1cmF0aW9uKVxuICAgICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5udW0gLSAxKSB7XG4gICAgICAgICAgICAgIHRoaXMubW92ZShpbmRleCArIDEsIHNsaWRlV2lkdGgsIGR1cmF0aW9uKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVmFsaWRDbG9zZSkge1xuICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE1vdmUgYmFjayBpbnRvIHBvc2l0aW9uXG4gICAgICAgICAgdGhpcy50cmFuc2xhdGVZKGluZGV4LCAwLCBkdXJhdGlvbilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbnRvdWNoY2FuY2VsOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLnRvdWNoU3RhcnQpIHtcbiAgICAgICAgdGhpcy5vbnRvdWNoZW5kKGV2ZW50KVxuICAgICAgICBkZWxldGUgdGhpcy50b3VjaFN0YXJ0XG4gICAgICB9XG4gICAgfSxcblxuICAgIG9udHJhbnNpdGlvbmVuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgc2xpZGUgPSB0aGlzLnNsaWRlc1t0aGlzLmluZGV4XVxuICAgICAgaWYgKCFldmVudCB8fCBzbGlkZSA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICAgICAgdGhpcy5wbGF5KClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFRpbWVvdXQodGhpcy5vcHRpb25zLm9uc2xpZGVlbmQsIFt0aGlzLmluZGV4LCBzbGlkZV0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIG9uY29tcGxldGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50XG4gICAgICB2YXIgcGFyZW50ID0gdGFyZ2V0ICYmIHRhcmdldC5wYXJlbnROb2RlXG4gICAgICB2YXIgaW5kZXhcbiAgICAgIGlmICghdGFyZ2V0IHx8ICFwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpbmRleCA9IHRoaXMuZ2V0Tm9kZUluZGV4KHBhcmVudClcbiAgICAgICQocGFyZW50KS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuc2xpZGVMb2FkaW5nQ2xhc3MpXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAkKHBhcmVudCkuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnNsaWRlRXJyb3JDbGFzcylcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpbmRleF0gPSAzIC8vIEZhaWxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaW5kZXhdID0gMiAvLyBEb25lXG4gICAgICB9XG4gICAgICAvLyBGaXggZm9yIElFNydzIGxhY2sgb2Ygc3VwcG9ydCBmb3IgcGVyY2VudGFnZSBtYXgtaGVpZ2h0OlxuICAgICAgaWYgKHRhcmdldC5jbGllbnRIZWlnaHQgPiB0aGlzLmNvbnRhaW5lclswXS5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgdGFyZ2V0LnN0eWxlLm1heEhlaWdodCA9IHRoaXMuY29udGFpbmVyWzBdLmNsaWVudEhlaWdodFxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaW50ZXJ2YWwgJiYgdGhpcy5zbGlkZXNbdGhpcy5pbmRleF0gPT09IHBhcmVudCkge1xuICAgICAgICB0aGlzLnBsYXkoKVxuICAgICAgfVxuICAgICAgdGhpcy5zZXRUaW1lb3V0KHRoaXMub3B0aW9ucy5vbnNsaWRlY29tcGxldGUsIFtpbmRleCwgcGFyZW50XSlcbiAgICB9LFxuXG4gICAgb25sb2FkOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHRoaXMub25jb21wbGV0ZShldmVudClcbiAgICB9LFxuXG4gICAgb25lcnJvcjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB0aGlzLm9uY29tcGxldGUoZXZlbnQpXG4gICAgfSxcblxuICAgIG9ua2V5ZG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxMzogLy8gUmV0dXJuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50b2dnbGVDb250cm9sc09uUmV0dXJuKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0KGV2ZW50KVxuICAgICAgICAgICAgdGhpcy50b2dnbGVDb250cm9scygpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjc6IC8vIEVzY1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzY2FwZSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICAgICAgICAvLyBwcmV2ZW50IEVzYyBmcm9tIGNsb3Npbmcgb3RoZXIgdGhpbmdzXG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDMyOiAvLyBTcGFjZVxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG9nZ2xlU2xpZGVzaG93T25TcGFjZSkge1xuICAgICAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdChldmVudClcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlU2xpZGVzaG93KClcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzNzogLy8gTGVmdFxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlS2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0KGV2ZW50KVxuICAgICAgICAgICAgdGhpcy5wcmV2KClcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOTogLy8gUmlnaHRcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVuYWJsZUtleWJvYXJkTmF2aWdhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdChldmVudClcbiAgICAgICAgICAgIHRoaXMubmV4dCgpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSxcblxuICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnRcbiAgICAgIHZhciBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZVxuICAgICAgLyoqXG4gICAgICAgKiBDaGVja3MgaWYgdGhlIHRhcmdldCBmcm9tIHRoZSBjbG9zZSBoYXMgdGhlIGdpdmVuIGNsYXNzXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBDbGFzcyBuYW1lXG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSB0YXJnZXQgaGFzIHRoZSBjbGFzcyBuYW1lXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGlzVGFyZ2V0KGNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gJCh0YXJnZXQpLmhhc0NsYXNzKGNsYXNzTmFtZSkgfHwgJChwYXJlbnQpLmhhc0NsYXNzKGNsYXNzTmFtZSlcbiAgICAgIH1cbiAgICAgIGlmIChpc1RhcmdldChvcHRpb25zLnRvZ2dsZUNsYXNzKSkge1xuICAgICAgICAvLyBDbGljayBvbiBcInRvZ2dsZVwiIGNvbnRyb2xcbiAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdChldmVudClcbiAgICAgICAgdGhpcy50b2dnbGVDb250cm9scygpXG4gICAgICB9IGVsc2UgaWYgKGlzVGFyZ2V0KG9wdGlvbnMucHJldkNsYXNzKSkge1xuICAgICAgICAvLyBDbGljayBvbiBcInByZXZcIiBjb250cm9sXG4gICAgICAgIHRoaXMucHJldmVudERlZmF1bHQoZXZlbnQpXG4gICAgICAgIHRoaXMucHJldigpXG4gICAgICB9IGVsc2UgaWYgKGlzVGFyZ2V0KG9wdGlvbnMubmV4dENsYXNzKSkge1xuICAgICAgICAvLyBDbGljayBvbiBcIm5leHRcIiBjb250cm9sXG4gICAgICAgIHRoaXMucHJldmVudERlZmF1bHQoZXZlbnQpXG4gICAgICAgIHRoaXMubmV4dCgpXG4gICAgICB9IGVsc2UgaWYgKGlzVGFyZ2V0KG9wdGlvbnMuY2xvc2VDbGFzcykpIHtcbiAgICAgICAgLy8gQ2xpY2sgb24gXCJjbG9zZVwiIGNvbnRyb2xcbiAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdChldmVudClcbiAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICB9IGVsc2UgaWYgKGlzVGFyZ2V0KG9wdGlvbnMucGxheVBhdXNlQ2xhc3MpKSB7XG4gICAgICAgIC8vIENsaWNrIG9uIFwicGxheS1wYXVzZVwiIGNvbnRyb2xcbiAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdChldmVudClcbiAgICAgICAgdGhpcy50b2dnbGVTbGlkZXNob3coKVxuICAgICAgfSBlbHNlIGlmIChwYXJlbnQgPT09IHRoaXMuc2xpZGVzQ29udGFpbmVyWzBdKSB7XG4gICAgICAgIC8vIENsaWNrIG9uIHNsaWRlIGJhY2tncm91bmRcbiAgICAgICAgaWYgKG9wdGlvbnMuY2xvc2VPblNsaWRlQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0KGV2ZW50KVxuICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudG9nZ2xlQ29udHJvbHNPblNsaWRlQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0KGV2ZW50KVxuICAgICAgICAgIHRoaXMudG9nZ2xlQ29udHJvbHMoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwYXJlbnQucGFyZW50Tm9kZSAmJlxuICAgICAgICBwYXJlbnQucGFyZW50Tm9kZSA9PT0gdGhpcy5zbGlkZXNDb250YWluZXJbMF1cbiAgICAgICkge1xuICAgICAgICAvLyBDbGljayBvbiBkaXNwbGF5ZWQgZWxlbWVudFxuICAgICAgICBpZiAob3B0aW9ucy50b2dnbGVDb250cm9sc09uU2xpZGVDbGljaykge1xuICAgICAgICAgIHRoaXMucHJldmVudERlZmF1bHQoZXZlbnQpXG4gICAgICAgICAgdGhpcy50b2dnbGVDb250cm9scygpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb25jbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMub3B0aW9ucy5lbXVsYXRlVG91Y2hFdmVudHMgJiZcbiAgICAgICAgdGhpcy50b3VjaERlbHRhICYmXG4gICAgICAgIChNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGEueCkgPiAyMCB8fCBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGEueSkgPiAyMClcbiAgICAgICkge1xuICAgICAgICBkZWxldGUgdGhpcy50b3VjaERlbHRhXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQ2xpY2soZXZlbnQpXG4gICAgfSxcblxuICAgIHVwZGF0ZUVkZ2VDbGFzc2VzOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIGlmICghaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxlZnRFZGdlQ2xhc3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGVmdEVkZ2VDbGFzcylcbiAgICAgIH1cbiAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5udW0gLSAxKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKHRoaXMub3B0aW9ucy5yaWdodEVkZ2VDbGFzcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yaWdodEVkZ2VDbGFzcylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlU2xpZGU6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuY29udGludW91cykge1xuICAgICAgICB0aGlzLnVwZGF0ZUVkZ2VDbGFzc2VzKGluZGV4KVxuICAgICAgfVxuICAgICAgdGhpcy5sb2FkRWxlbWVudHMoaW5kZXgpXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVubG9hZEVsZW1lbnRzKSB7XG4gICAgICAgIHRoaXMudW5sb2FkRWxlbWVudHMoaW5kZXgpXG4gICAgICB9XG4gICAgICB0aGlzLnNldFRpdGxlKGluZGV4KVxuICAgIH0sXG5cbiAgICBvbnNsaWRlOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBpbmRleFxuICAgICAgdGhpcy5oYW5kbGVTbGlkZShpbmRleClcbiAgICAgIHRoaXMuc2V0VGltZW91dCh0aGlzLm9wdGlvbnMub25zbGlkZSwgW2luZGV4LCB0aGlzLnNsaWRlc1tpbmRleF1dKVxuICAgIH0sXG5cbiAgICBzZXRUaXRsZTogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICB2YXIgZmlyc3RDaGlsZCA9IHRoaXMuc2xpZGVzW2luZGV4XS5maXJzdENoaWxkXG4gICAgICB2YXIgdGV4dCA9IGZpcnN0Q2hpbGQudGl0bGUgfHwgZmlyc3RDaGlsZC5hbHRcbiAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSB0aGlzLnRpdGxlRWxlbWVudFxuICAgICAgaWYgKHRpdGxlRWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy50aXRsZUVsZW1lbnQuZW1wdHkoKVxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgIHRpdGxlRWxlbWVudFswXS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoZnVuYywgYXJncywgd2FpdCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICByZXR1cm4gKFxuICAgICAgICBmdW5jICYmXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmdW5jLmFwcGx5KHRoYXQsIGFyZ3MgfHwgW10pXG4gICAgICAgIH0sIHdhaXQgfHwgMClcbiAgICAgIClcbiAgICB9LFxuXG4gICAgaW1hZ2VGYWN0b3J5OiBmdW5jdGlvbiAob2JqLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICB2YXIgaW1nID0gdGhpcy5pbWFnZVByb3RvdHlwZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICB2YXIgdXJsID0gb2JqXG4gICAgICB2YXIgYmFja2dyb3VuZFNpemUgPSB0aGlzLm9wdGlvbnMuc3RyZXRjaEltYWdlc1xuICAgICAgdmFyIGNhbGxlZFxuICAgICAgdmFyIGVsZW1lbnRcbiAgICAgIHZhciB0aXRsZVxuICAgICAgdmFyIGFsdFRleHRcbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciB0aGUgbG9hZC9lcnJvciBldmVudFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZXZlbnR9IGV2ZW50IGxvYWQvZXJyb3IgZXZlbnRcbiAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IHRpbWVvdXQgSURcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY2FsbGJhY2tXcmFwcGVyKGV2ZW50KSB7XG4gICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICB0eXBlOiBldmVudC50eXBlLFxuICAgICAgICAgICAgdGFyZ2V0OiBlbGVtZW50XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAvLyBGaXggZm9yIElFNyBmaXJpbmcgdGhlIGxvYWQgZXZlbnQgZm9yXG4gICAgICAgICAgICAvLyBjYWNoZWQgaW1hZ2VzIGJlZm9yZSB0aGUgZWxlbWVudCBjb3VsZFxuICAgICAgICAgICAgLy8gYmUgYWRkZWQgdG8gdGhlIERPTTpcbiAgICAgICAgICAgIHJldHVybiB0aGF0LnNldFRpbWVvdXQoY2FsbGJhY2tXcmFwcGVyLCBbZXZlbnRdKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsZWQgPSB0cnVlXG4gICAgICAgICAgJChpbWcpLm9mZignbG9hZCBlcnJvcicsIGNhbGxiYWNrV3JhcHBlcilcbiAgICAgICAgICBpZiAoYmFja2dyb3VuZFNpemUpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3VybChcIicgKyB1cmwgKyAnXCIpIGNlbnRlciBuby1yZXBlYXQnXG4gICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBiYWNrZ3JvdW5kU2l6ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayhldmVudClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHVybCA9IHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgdGhpcy5vcHRpb25zLnVybFByb3BlcnR5KVxuICAgICAgICB0aXRsZSA9IHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgdGhpcy5vcHRpb25zLnRpdGxlUHJvcGVydHkpXG4gICAgICAgIGFsdFRleHQgPVxuICAgICAgICAgIHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgdGhpcy5vcHRpb25zLmFsdFRleHRQcm9wZXJ0eSkgfHwgdGl0bGVcbiAgICAgIH1cbiAgICAgIGlmIChiYWNrZ3JvdW5kU2l6ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBiYWNrZ3JvdW5kU2l6ZSA9ICdjb250YWluJ1xuICAgICAgfVxuICAgICAgYmFja2dyb3VuZFNpemUgPVxuICAgICAgICB0aGlzLnN1cHBvcnQuYmFja2dyb3VuZFNpemUgJiZcbiAgICAgICAgdGhpcy5zdXBwb3J0LmJhY2tncm91bmRTaXplW2JhY2tncm91bmRTaXplXSAmJlxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZVxuICAgICAgaWYgKGJhY2tncm91bmRTaXplKSB7XG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRQcm90b3R5cGUuY2xvbmVOb2RlKGZhbHNlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudCA9IGltZ1xuICAgICAgICBpbWcuZHJhZ2dhYmxlID0gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBlbGVtZW50LnRpdGxlID0gdGl0bGVcbiAgICAgIH1cbiAgICAgIGlmIChhbHRUZXh0KSB7XG4gICAgICAgIGVsZW1lbnQuYWx0ID0gYWx0VGV4dFxuICAgICAgfVxuICAgICAgJChpbWcpLm9uKCdsb2FkIGVycm9yJywgY2FsbGJhY2tXcmFwcGVyKVxuICAgICAgaW1nLnNyYyA9IHVybFxuICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9LFxuXG4gICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2spIHtcbiAgICAgIHZhciB0eXBlID0gb2JqICYmIHRoaXMuZ2V0SXRlbVByb3BlcnR5KG9iaiwgdGhpcy5vcHRpb25zLnR5cGVQcm9wZXJ0eSlcbiAgICAgIHZhciBmYWN0b3J5ID1cbiAgICAgICAgKHR5cGUgJiYgdGhpc1t0eXBlLnNwbGl0KCcvJylbMF0gKyAnRmFjdG9yeSddKSB8fCB0aGlzLmltYWdlRmFjdG9yeVxuICAgICAgdmFyIGVsZW1lbnQgPSBvYmogJiYgZmFjdG9yeS5jYWxsKHRoaXMsIG9iaiwgY2FsbGJhY2spXG4gICAgICB2YXIgc3Jjc2V0ID0gdGhpcy5nZXRJdGVtUHJvcGVydHkob2JqLCB0aGlzLm9wdGlvbnMuc3Jjc2V0UHJvcGVydHkpXG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudFByb3RvdHlwZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICAgIHRoaXMuc2V0VGltZW91dChjYWxsYmFjaywgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICB0YXJnZXQ6IGVsZW1lbnRcbiAgICAgICAgICB9XG4gICAgICAgIF0pXG4gICAgICB9XG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzcmNzZXQpXG4gICAgICB9XG4gICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5zbGlkZUNvbnRlbnRDbGFzcylcbiAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfSxcblxuICAgIGxvYWRFbGVtZW50OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIGlmICghdGhpcy5lbGVtZW50c1tpbmRleF0pIHtcbiAgICAgICAgaWYgKHRoaXMuc2xpZGVzW2luZGV4XS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1tpbmRleF0gPSAkKHRoaXMuc2xpZGVzW2luZGV4XSkuaGFzQ2xhc3MoXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2xpZGVFcnJvckNsYXNzXG4gICAgICAgICAgKVxuICAgICAgICAgICAgPyAzXG4gICAgICAgICAgICA6IDJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2luZGV4XSA9IDEgLy8gTG9hZGluZ1xuICAgICAgICAgICQodGhpcy5zbGlkZXNbaW5kZXhdKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc2xpZGVMb2FkaW5nQ2xhc3MpXG4gICAgICAgICAgdGhpcy5zbGlkZXNbaW5kZXhdLmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KHRoaXMubGlzdFtpbmRleF0sIHRoaXMucHJveHlMaXN0ZW5lcilcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbG9hZEVsZW1lbnRzOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHZhciBsaW1pdCA9IE1hdGgubWluKHRoaXMubnVtLCB0aGlzLm9wdGlvbnMucHJlbG9hZFJhbmdlICogMiArIDEpXG4gICAgICB2YXIgaiA9IGluZGV4XG4gICAgICB2YXIgaVxuICAgICAgZm9yIChpID0gMDsgaSA8IGxpbWl0OyBpICs9IDEpIHtcbiAgICAgICAgLy8gRmlyc3QgbG9hZCB0aGUgY3VycmVudCBzbGlkZSBlbGVtZW50ICgwKSxcbiAgICAgICAgLy8gdGhlbiB0aGUgbmV4dCBvbmUgKCsxKSxcbiAgICAgICAgLy8gdGhlbiB0aGUgcHJldmlvdXMgb25lICgtMiksXG4gICAgICAgIC8vIHRoZW4gdGhlIG5leHQgYWZ0ZXIgbmV4dCAoKzIpLCBldGMuOlxuICAgICAgICBqICs9IGkgKiAoaSAlIDIgPT09IDAgPyAtMSA6IDEpXG4gICAgICAgIC8vIENvbm5lY3QgdGhlIGVuZHMgb2YgdGhlIGxpc3QgdG8gbG9hZCBzbGlkZSBlbGVtZW50cyBmb3JcbiAgICAgICAgLy8gY29udGludW91cyBuYXZpZ2F0aW9uOlxuICAgICAgICBqID0gdGhpcy5jaXJjbGUoailcbiAgICAgICAgdGhpcy5sb2FkRWxlbWVudChqKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmxvYWRFbGVtZW50czogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICB2YXIgaSwgZGlmZlxuICAgICAgZm9yIChpIGluIHRoaXMuZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmVsZW1lbnRzLCBpKSkge1xuICAgICAgICAgIGRpZmYgPSBNYXRoLmFicyhpbmRleCAtIGkpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZGlmZiA+IHRoaXMub3B0aW9ucy5wcmVsb2FkUmFuZ2UgJiZcbiAgICAgICAgICAgIGRpZmYgKyB0aGlzLm9wdGlvbnMucHJlbG9hZFJhbmdlIDwgdGhpcy5udW1cbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMudW5sb2FkU2xpZGUoaSlcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnRzW2ldXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFkZFNsaWRlOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVQcm90b3R5cGUuY2xvbmVOb2RlKGZhbHNlKVxuICAgICAgc2xpZGUuc2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JywgaW5kZXgpXG4gICAgICB0aGlzLnNsaWRlc0NvbnRhaW5lclswXS5hcHBlbmRDaGlsZChzbGlkZSlcbiAgICAgIHRoaXMuc2xpZGVzLnB1c2goc2xpZGUpXG4gICAgfSxcblxuICAgIHBvc2l0aW9uU2xpZGU6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbaW5kZXhdXG4gICAgICBzbGlkZS5zdHlsZS53aWR0aCA9IHRoaXMuc2xpZGVXaWR0aCArICdweCdcbiAgICAgIGlmICh0aGlzLnN1cHBvcnQudHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLmxlZnQgPSBpbmRleCAqIC10aGlzLnNsaWRlV2lkdGggKyAncHgnXG4gICAgICAgIHRoaXMubW92ZShcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICB0aGlzLmluZGV4ID4gaW5kZXhcbiAgICAgICAgICAgID8gLXRoaXMuc2xpZGVXaWR0aFxuICAgICAgICAgICAgOiB0aGlzLmluZGV4IDwgaW5kZXhcbiAgICAgICAgICAgID8gdGhpcy5zbGlkZVdpZHRoXG4gICAgICAgICAgICA6IDAsXG4gICAgICAgICAgMFxuICAgICAgICApXG4gICAgICB9XG4gICAgfSxcblxuICAgIGluaXRTbGlkZXM6IGZ1bmN0aW9uIChyZWxvYWQpIHtcbiAgICAgIHZhciBjbGVhclNsaWRlcywgaVxuICAgICAgaWYgKCFyZWxvYWQpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbnMgPSBbXVxuICAgICAgICB0aGlzLnBvc2l0aW9ucy5sZW5ndGggPSB0aGlzLm51bVxuICAgICAgICB0aGlzLmVsZW1lbnRzID0ge31cbiAgICAgICAgdGhpcy5pbWFnZVByb3RvdHlwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG4gICAgICAgIHRoaXMuZWxlbWVudFByb3RvdHlwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHRoaXMuc2xpZGVQcm90b3R5cGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAkKHRoaXMuc2xpZGVQcm90b3R5cGUpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKVxuICAgICAgICB0aGlzLnNsaWRlcyA9IHRoaXMuc2xpZGVzQ29udGFpbmVyWzBdLmNoaWxkcmVuXG4gICAgICAgIGNsZWFyU2xpZGVzID1cbiAgICAgICAgICB0aGlzLm9wdGlvbnMuY2xlYXJTbGlkZXMgfHwgdGhpcy5zbGlkZXMubGVuZ3RoICE9PSB0aGlzLm51bVxuICAgICAgfVxuICAgICAgdGhpcy5zbGlkZVdpZHRoID0gdGhpcy5jb250YWluZXJbMF0uY2xpZW50V2lkdGhcbiAgICAgIHRoaXMuc2xpZGVIZWlnaHQgPSB0aGlzLmNvbnRhaW5lclswXS5jbGllbnRIZWlnaHRcbiAgICAgIHRoaXMuc2xpZGVzQ29udGFpbmVyWzBdLnN0eWxlLndpZHRoID0gdGhpcy5udW0gKiB0aGlzLnNsaWRlV2lkdGggKyAncHgnXG4gICAgICBpZiAoY2xlYXJTbGlkZXMpIHtcbiAgICAgICAgdGhpcy5yZXNldFNsaWRlcygpXG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5udW07IGkgKz0gMSkge1xuICAgICAgICBpZiAoY2xlYXJTbGlkZXMpIHtcbiAgICAgICAgICB0aGlzLmFkZFNsaWRlKGkpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3NpdGlvblNsaWRlKGkpXG4gICAgICB9XG4gICAgICAvLyBSZXBvc2l0aW9uIHRoZSBzbGlkZXMgYmVmb3JlIGFuZCBhZnRlciB0aGUgZ2l2ZW4gaW5kZXg6XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRpbnVvdXMgJiYgdGhpcy5zdXBwb3J0LnRyYW5zZm9ybSkge1xuICAgICAgICB0aGlzLm1vdmUodGhpcy5jaXJjbGUodGhpcy5pbmRleCAtIDEpLCAtdGhpcy5zbGlkZVdpZHRoLCAwKVxuICAgICAgICB0aGlzLm1vdmUodGhpcy5jaXJjbGUodGhpcy5pbmRleCArIDEpLCB0aGlzLnNsaWRlV2lkdGgsIDApXG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuc3VwcG9ydC50cmFuc2Zvcm0pIHtcbiAgICAgICAgdGhpcy5zbGlkZXNDb250YWluZXJbMF0uc3R5bGUubGVmdCA9XG4gICAgICAgICAgdGhpcy5pbmRleCAqIC10aGlzLnNsaWRlV2lkdGggKyAncHgnXG4gICAgICB9XG4gICAgfSxcblxuICAgIHVubG9hZFNsaWRlOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHZhciBzbGlkZSwgZmlyc3RDaGlsZFxuICAgICAgc2xpZGUgPSB0aGlzLnNsaWRlc1tpbmRleF1cbiAgICAgIGZpcnN0Q2hpbGQgPSBzbGlkZS5maXJzdENoaWxkXG4gICAgICBpZiAoZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBzbGlkZS5yZW1vdmVDaGlsZChmaXJzdENoaWxkKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmxvYWRBbGxTbGlkZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpLCBsZW5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMudW5sb2FkU2xpZGUoaSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdG9nZ2xlQ29udHJvbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250cm9sc0NsYXNzID0gdGhpcy5vcHRpb25zLmNvbnRyb2xzQ2xhc3NcbiAgICAgIGlmICh0aGlzLmNvbnRhaW5lci5oYXNDbGFzcyhjb250cm9sc0NsYXNzKSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhjb250cm9sc0NsYXNzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3MoY29udHJvbHNDbGFzcylcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdG9nZ2xlU2xpZGVzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgICAgdGhpcy5wbGF5KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXROb2RlSW5kZXg6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSwgMTApXG4gICAgfSxcblxuICAgIGdldE5lc3RlZFByb3BlcnR5OiBmdW5jdGlvbiAob2JqLCBwcm9wZXJ0eSkge1xuICAgICAgcHJvcGVydHkucmVwbGFjZShcbiAgICAgICAgLy8gTWF0Y2hlcyBuYXRpdmUgSmF2YVNjcmlwdCBub3RhdGlvbiBpbiBhIFN0cmluZyxcbiAgICAgICAgLy8gZS5nLiAnW1wiZG91YmxlUXVvdGVQcm9wXCJdLmRvdFByb3BbMl0nXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgICAgICAvXFxbKD86JyhbXiddKyknfFwiKFteXCJdKylcInwoXFxkKykpXFxdfCg/Oig/Ol58XFwuKShbXlxcLlxcW10rKSkvZyxcbiAgICAgICAgZnVuY3Rpb24gKHN0ciwgc2luZ2xlUXVvdGVQcm9wLCBkb3VibGVRdW90ZVByb3AsIGFycmF5SW5kZXgsIGRvdFByb3ApIHtcbiAgICAgICAgICB2YXIgcHJvcCA9XG4gICAgICAgICAgICBkb3RQcm9wIHx8XG4gICAgICAgICAgICBzaW5nbGVRdW90ZVByb3AgfHxcbiAgICAgICAgICAgIGRvdWJsZVF1b3RlUHJvcCB8fFxuICAgICAgICAgICAgKGFycmF5SW5kZXggJiYgcGFyc2VJbnQoYXJyYXlJbmRleCwgMTApKVxuICAgICAgICAgIGlmIChzdHIgJiYgb2JqKSB7XG4gICAgICAgICAgICBvYmogPSBvYmpbcHJvcF1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgIHJldHVybiBvYmpcbiAgICB9LFxuXG4gICAgZ2V0RGF0YVByb3BlcnR5OiBmdW5jdGlvbiAob2JqLCBwcm9wZXJ0eSkge1xuICAgICAgdmFyIGtleVxuICAgICAgdmFyIHByb3BcbiAgICAgIGlmIChvYmouZGF0YXNldCkge1xuICAgICAgICBrZXkgPSBwcm9wZXJ0eS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoXywgYikge1xuICAgICAgICAgIHJldHVybiBiLnRvVXBwZXJDYXNlKClcbiAgICAgICAgfSlcbiAgICAgICAgcHJvcCA9IG9iai5kYXRhc2V0W2tleV1cbiAgICAgIH0gZWxzZSBpZiAob2JqLmdldEF0dHJpYnV0ZSkge1xuICAgICAgICBwcm9wID0gb2JqLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAnZGF0YS0nICsgcHJvcGVydHkucmVwbGFjZSgvKFtBLVpdKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKVxuICAgICAgICApXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgL14odHJ1ZXxmYWxzZXxudWxsfC0/XFxkKyhcXC5cXGQrKT98XFx7W1xcc1xcU10qXFx9fFxcW1tcXHNcXFNdKlxcXSkkLy50ZXN0KHByb3ApXG4gICAgICAgICkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gJC5wYXJzZUpTT04ocHJvcClcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBKU09OIHBhcnNpbmcgZXJyb3JzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wXG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldEl0ZW1Qcm9wZXJ0eTogZnVuY3Rpb24gKG9iaiwgcHJvcGVydHkpIHtcbiAgICAgIHZhciBwcm9wID0gdGhpcy5nZXREYXRhUHJvcGVydHkob2JqLCBwcm9wZXJ0eSlcbiAgICAgIGlmIChwcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcCA9IG9ialtwcm9wZXJ0eV1cbiAgICAgIH1cbiAgICAgIGlmIChwcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcCA9IHRoaXMuZ2V0TmVzdGVkUHJvcGVydHkob2JqLCBwcm9wZXJ0eSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wXG4gICAgfSxcblxuICAgIGluaXRTdGFydEluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLm9wdGlvbnMuaW5kZXhcbiAgICAgIHZhciB1cmxQcm9wZXJ0eSA9IHRoaXMub3B0aW9ucy51cmxQcm9wZXJ0eVxuICAgICAgdmFyIGlcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBpbmRleCBpcyBnaXZlbiBhcyBhIGxpc3Qgb2JqZWN0OlxuICAgICAgaWYgKGluZGV4ICYmIHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubnVtOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmxpc3RbaV0gPT09IGluZGV4IHx8XG4gICAgICAgICAgICB0aGlzLmdldEl0ZW1Qcm9wZXJ0eSh0aGlzLmxpc3RbaV0sIHVybFByb3BlcnR5KSA9PT1cbiAgICAgICAgICAgICAgdGhpcy5nZXRJdGVtUHJvcGVydHkoaW5kZXgsIHVybFByb3BlcnR5KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaW5kZXggPSBpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbmRleCBpcyBpbiB0aGUgbGlzdCByYW5nZTpcbiAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmNpcmNsZShwYXJzZUludChpbmRleCwgMTApIHx8IDApXG4gICAgfSxcblxuICAgIGluaXRFdmVudExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICB2YXIgc2xpZGVzQ29udGFpbmVyID0gdGhpcy5zbGlkZXNDb250YWluZXJcbiAgICAgIC8qKlxuICAgICAgICogUHJveHkgbGlzdGVuZXJcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2V2ZW50fSBldmVudCBvcmlnaW5hbCBldmVudFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwcm94eUxpc3RlbmVyKGV2ZW50KSB7XG4gICAgICAgIHZhciB0eXBlID1cbiAgICAgICAgICB0aGF0LnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGF0LnN1cHBvcnQudHJhbnNpdGlvbi5lbmQgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICAgID8gJ3RyYW5zaXRpb25lbmQnXG4gICAgICAgICAgICA6IGV2ZW50LnR5cGVcbiAgICAgICAgdGhhdFsnb24nICsgdHlwZV0oZXZlbnQpXG4gICAgICB9XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIHByb3h5TGlzdGVuZXIpXG4gICAgICAkKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBwcm94eUxpc3RlbmVyKVxuICAgICAgJChkb2N1bWVudC5ib2R5KS5vbigna2V5ZG93bicsIHByb3h5TGlzdGVuZXIpXG4gICAgICB0aGlzLmNvbnRhaW5lci5vbignY2xpY2snLCBwcm94eUxpc3RlbmVyKVxuICAgICAgaWYgKHRoaXMuc3VwcG9ydC50b3VjaCkge1xuICAgICAgICBzbGlkZXNDb250YWluZXIub24oXG4gICAgICAgICAgJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJyxcbiAgICAgICAgICBwcm94eUxpc3RlbmVyXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVtdWxhdGVUb3VjaEV2ZW50cyAmJiB0aGlzLnN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgICBzbGlkZXNDb250YWluZXIub24oXG4gICAgICAgICAgJ21vdXNlZG93biBtb3VzZW1vdmUgbW91c2V1cCBtb3VzZW91dCcsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lclxuICAgICAgICApXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgICAgc2xpZGVzQ29udGFpbmVyLm9uKHRoaXMuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCwgcHJveHlMaXN0ZW5lcilcbiAgICAgIH1cbiAgICAgIHRoaXMucHJveHlMaXN0ZW5lciA9IHByb3h5TGlzdGVuZXJcbiAgICB9LFxuXG4gICAgZGVzdHJveUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2xpZGVzQ29udGFpbmVyID0gdGhpcy5zbGlkZXNDb250YWluZXJcbiAgICAgIHZhciBwcm94eUxpc3RlbmVyID0gdGhpcy5wcm94eUxpc3RlbmVyXG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCBwcm94eUxpc3RlbmVyKVxuICAgICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJ2tleWRvd24nLCBwcm94eUxpc3RlbmVyKVxuICAgICAgdGhpcy5jb250YWluZXIub2ZmKCdjbGljaycsIHByb3h5TGlzdGVuZXIpXG4gICAgICBpZiAodGhpcy5zdXBwb3J0LnRvdWNoKSB7XG4gICAgICAgIHNsaWRlc0NvbnRhaW5lci5vZmYoXG4gICAgICAgICAgJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJyxcbiAgICAgICAgICBwcm94eUxpc3RlbmVyXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVtdWxhdGVUb3VjaEV2ZW50cyAmJiB0aGlzLnN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgICBzbGlkZXNDb250YWluZXIub2ZmKFxuICAgICAgICAgICdtb3VzZWRvd24gbW91c2Vtb3ZlIG1vdXNldXAgbW91c2VvdXQnLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXJcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICAgIHNsaWRlc0NvbnRhaW5lci5vZmYodGhpcy5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLCBwcm94eUxpc3RlbmVyKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBoYW5kbGVPcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm9ub3BlbmVkKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vbm9wZW5lZC5jYWxsKHRoaXMpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGluaXRXaWRnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgLyoqXG4gICAgICAgKiBPcGVuIGhhbmRsZXJcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2V2ZW50fSBldmVudCBHYWxsZXJ5IG9wZW4gZXZlbnRcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gb3BlbkhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhhdC5jb250YWluZXJbMF0pIHtcbiAgICAgICAgICB0aGF0LmNvbnRhaW5lci5vZmYodGhhdC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLCBvcGVuSGFuZGxlcilcbiAgICAgICAgICB0aGF0LmhhbmRsZU9wZW4oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRhaW5lciA9ICQodGhpcy5vcHRpb25zLmNvbnRhaW5lcilcbiAgICAgIGlmICghdGhpcy5jb250YWluZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuY29uc29sZS5sb2coXG4gICAgICAgICAgJ2JsdWVpbXAgR2FsbGVyeTogV2lkZ2V0IGNvbnRhaW5lciBub3QgZm91bmQuJyxcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICB0aGlzLnNsaWRlc0NvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyXG4gICAgICAgIC5maW5kKHRoaXMub3B0aW9ucy5zbGlkZXNDb250YWluZXIpXG4gICAgICAgIC5maXJzdCgpXG4gICAgICBpZiAoIXRoaXMuc2xpZGVzQ29udGFpbmVyLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmNvbnNvbGUubG9nKFxuICAgICAgICAgICdibHVlaW1wIEdhbGxlcnk6IFNsaWRlcyBjb250YWluZXIgbm90IGZvdW5kLicsXG4gICAgICAgICAgdGhpcy5vcHRpb25zLnNsaWRlc0NvbnRhaW5lclxuICAgICAgICApXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgdGhpcy50aXRsZUVsZW1lbnQgPSB0aGlzLmNvbnRhaW5lci5maW5kKHRoaXMub3B0aW9ucy50aXRsZUVsZW1lbnQpLmZpcnN0KClcbiAgICAgIGlmICh0aGlzLm51bSA9PT0gMSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc2luZ2xlQ2xhc3MpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm9ub3Blbikge1xuICAgICAgICB0aGlzLm9wdGlvbnMub25vcGVuLmNhbGwodGhpcylcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLm9wdGlvbnMuZGlzcGxheVRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIub24odGhpcy5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLCBvcGVuSGFuZGxlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGFuZGxlT3BlbigpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmhpZGVQYWdlU2Nyb2xsYmFycykge1xuICAgICAgICAvLyBIaWRlIHRoZSBwYWdlIHNjcm9sbGJhcnM6XG4gICAgICAgIHRoaXMuYm9keU92ZXJmbG93U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJ1xuICAgICAgfVxuICAgICAgdGhpcy5jb250YWluZXJbMF0uc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgIHRoaXMuaW5pdFNsaWRlcygpXG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZGlzcGxheUNsYXNzKVxuICAgIH0sXG5cbiAgICBpbml0T3B0aW9uczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIHByb3RvdHlwZSBvcHRpb25zOlxuICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucylcbiAgICAgIC8vIENoZWNrIGlmIGNhcm91c2VsIG1vZGUgaXMgZW5hYmxlZDpcbiAgICAgIGlmIChcbiAgICAgICAgKG9wdGlvbnMgJiYgb3B0aW9ucy5jYXJvdXNlbCkgfHxcbiAgICAgICAgKHRoaXMub3B0aW9ucy5jYXJvdXNlbCAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5jYXJvdXNlbCAhPT0gZmFsc2UpKVxuICAgICAgKSB7XG4gICAgICAgICQuZXh0ZW5kKHRoaXMub3B0aW9ucywgdGhpcy5jYXJvdXNlbE9wdGlvbnMpXG4gICAgICB9XG4gICAgICAvLyBPdmVycmlkZSBhbnkgZ2l2ZW4gb3B0aW9uczpcbiAgICAgICQuZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucylcbiAgICAgIGlmICh0aGlzLm51bSA8IDMpIHtcbiAgICAgICAgLy8gMSBvciAyIHNsaWRlcyBjYW5ub3QgYmUgZGlzcGxheWVkIGNvbnRpbnVvdXMsXG4gICAgICAgIC8vIHJlbWVtYmVyIHRoZSBvcmlnaW5hbCBvcHRpb24gYnkgc2V0dGluZyB0byBudWxsIGluc3RlYWQgb2YgZmFsc2U6XG4gICAgICAgIHRoaXMub3B0aW9ucy5jb250aW51b3VzID0gdGhpcy5vcHRpb25zLmNvbnRpbnVvdXMgPyBudWxsIDogZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmVtdWxhdGVUb3VjaEV2ZW50cyA9IGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV2ZW50KSB7XG4gICAgICAgIHRoaXMucHJldmVudERlZmF1bHQodGhpcy5vcHRpb25zLmV2ZW50KVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gR2FsbGVyeVxufSlcbiIsIi8qXG4gKiBibHVlaW1wIGhlbHBlciBKU1xuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvR2FsbGVyeVxuICpcbiAqIENvcHlyaWdodCAyMDEzLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqL1xuXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5cbjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICAvKipcbiAgICogT2JqZWN0LmFzc2lnbiBwb2x5ZmlsbFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqMSBGaXJzdCBvYmplY3RcbiAgICogQHBhcmFtIHtvYmplY3R9IG9iajIgU2Vjb25kIG9iamVjdFxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBNZXJnZWQgb2JqZWN0XG4gICAqL1xuICBmdW5jdGlvbiBleHRlbmQob2JqMSwgb2JqMikge1xuICAgIHZhciBwcm9wXG4gICAgZm9yIChwcm9wIGluIG9iajIpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqMiwgcHJvcCkpIHtcbiAgICAgICAgb2JqMVtwcm9wXSA9IG9iajJbcHJvcF1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajFcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0geyp9IHF1ZXJ5IGpRdWVyeSB0eXBlIHF1ZXJ5IGFyZ3VtZW50XG4gICAqL1xuICBmdW5jdGlvbiBIZWxwZXIocXVlcnkpIHtcbiAgICBpZiAoIXRoaXMgfHwgdGhpcy5maW5kICE9PSBIZWxwZXIucHJvdG90eXBlLmZpbmQpIHtcbiAgICAgIC8vIENhbGxlZCBhcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGFzIGNvbnN0cnVjdG9yLFxuICAgICAgLy8gc28gd2Ugc2ltcGx5IHJldHVybiBhIG5ldyBpbnN0YW5jZTpcbiAgICAgIHJldHVybiBuZXcgSGVscGVyKHF1ZXJ5KVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHF1ZXJ5ID0gdGhpcy5maW5kKHF1ZXJ5KVxuICAgICAgfVxuICAgICAgaWYgKHF1ZXJ5Lm5vZGVUeXBlIHx8IHF1ZXJ5ID09PSBxdWVyeS53aW5kb3cpIHtcbiAgICAgICAgLy8gU2luZ2xlIEhUTUwgZWxlbWVudFxuICAgICAgICB0aGlzLmxlbmd0aCA9IDFcbiAgICAgICAgdGhpc1swXSA9IHF1ZXJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBIVE1MIGVsZW1lbnQgY29sbGVjdGlvblxuICAgICAgICB2YXIgaSA9IHF1ZXJ5Lmxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCA9IGlcbiAgICAgICAgd2hpbGUgKGkpIHtcbiAgICAgICAgICBpIC09IDFcbiAgICAgICAgICB0aGlzW2ldID0gcXVlcnlbaV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEhlbHBlci5leHRlbmQgPSBleHRlbmRcblxuICBIZWxwZXIuY29udGFpbnMgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBlbGVtZW50KSB7XG4gICAgZG8ge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgaWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH0gd2hpbGUgKGVsZW1lbnQpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBIZWxwZXIucGFyc2VKU09OID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHJldHVybiB3aW5kb3cuSlNPTiAmJiBKU09OLnBhcnNlKHN0cmluZylcbiAgfVxuXG4gIGV4dGVuZChIZWxwZXIucHJvdG90eXBlLCB7XG4gICAgZmluZDogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpc1swXSB8fCBkb2N1bWVudFxuICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAgICAgICAgcXVlcnkgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChxdWVyeSlcbiAgICAgICAgfSBlbHNlIGlmIChxdWVyeS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgIHF1ZXJ5ID0gY29udGFpbmVyLmdldEVsZW1lbnRCeUlkKHF1ZXJ5LnNsaWNlKDEpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1ZXJ5ID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKHF1ZXJ5KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEhlbHBlcihxdWVyeSlcbiAgICB9LFxuXG4gICAgaGFzQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIGlmICghdGhpc1swXSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKCcoXnxcXFxccyspJyArIGNsYXNzTmFtZSArICcoXFxcXHMrfCQpJykudGVzdChcbiAgICAgICAgdGhpc1swXS5jbGFzc05hbWVcbiAgICAgIClcbiAgICB9LFxuXG4gICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHZhciBpID0gdGhpcy5sZW5ndGhcbiAgICAgIHZhciBlbGVtZW50XG4gICAgICB3aGlsZSAoaSkge1xuICAgICAgICBpIC09IDFcbiAgICAgICAgZWxlbWVudCA9IHRoaXNbaV1cbiAgICAgICAgaWYgKCFlbGVtZW50LmNsYXNzTmFtZSkge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lXG4gICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNDbGFzcyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWVcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMrKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzK3wkKScpXG4gICAgICB2YXIgaSA9IHRoaXMubGVuZ3RoXG4gICAgICB2YXIgZWxlbWVudFxuICAgICAgd2hpbGUgKGkpIHtcbiAgICAgICAgaSAtPSAxXG4gICAgICAgIGVsZW1lbnQgPSB0aGlzW2ldXG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShyZWdleHAsICcgJylcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICB2YXIgZXZlbnROYW1lcyA9IGV2ZW50TmFtZS5zcGxpdCgvXFxzKy8pXG4gICAgICB2YXIgaVxuICAgICAgdmFyIGVsZW1lbnRcbiAgICAgIHdoaWxlIChldmVudE5hbWVzLmxlbmd0aCkge1xuICAgICAgICBldmVudE5hbWUgPSBldmVudE5hbWVzLnNoaWZ0KClcbiAgICAgICAgaSA9IHRoaXMubGVuZ3RoXG4gICAgICAgIHdoaWxlIChpKSB7XG4gICAgICAgICAgaSAtPSAxXG4gICAgICAgICAgZWxlbWVudCA9IHRoaXNbaV1cbiAgICAgICAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBmYWxzZSlcbiAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIG9mZjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgdmFyIGV2ZW50TmFtZXMgPSBldmVudE5hbWUuc3BsaXQoL1xccysvKVxuICAgICAgdmFyIGlcbiAgICAgIHZhciBlbGVtZW50XG4gICAgICB3aGlsZSAoZXZlbnROYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lcy5zaGlmdCgpXG4gICAgICAgIGkgPSB0aGlzLmxlbmd0aFxuICAgICAgICB3aGlsZSAoaSkge1xuICAgICAgICAgIGkgLT0gMVxuICAgICAgICAgIGVsZW1lbnQgPSB0aGlzW2ldXG4gICAgICAgICAgaWYgKGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgZmFsc2UpXG4gICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmRldGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmRldGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBlbXB0eTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGkgPSB0aGlzLmxlbmd0aFxuICAgICAgdmFyIGVsZW1lbnRcbiAgICAgIHdoaWxlIChpKSB7XG4gICAgICAgIGkgLT0gMVxuICAgICAgICBlbGVtZW50ID0gdGhpc1tpXVxuICAgICAgICB3aGlsZSAoZWxlbWVudC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQubGFzdENoaWxkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBmaXJzdDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBIZWxwZXIodGhpc1swXSlcbiAgICB9XG4gIH0pXG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gSGVscGVyXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuYmx1ZWltcCA9IHdpbmRvdy5ibHVlaW1wIHx8IHt9XG4gICAgd2luZG93LmJsdWVpbXAuaGVscGVyID0gSGVscGVyXG4gIH1cbn0pKClcbiIsIlxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5nZXRZb3VUdWJlSUQgPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHtcblxuICByZXR1cm4gZnVuY3Rpb24gKHVybCwgb3B0cykge1xuICAgIGlmIChvcHRzID09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0cyA9IHtmdXp6eTogdHJ1ZX07XG4gICAgfVxuXG4gICAgaWYgKC95b3V0dVxcLj9iZS8udGVzdCh1cmwpKSB7XG5cbiAgICAgIC8vIExvb2sgZmlyc3QgZm9yIGtub3duIHBhdHRlcm5zXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBwYXR0ZXJucyA9IFtcbiAgICAgICAgL3lvdXR1XFwuYmVcXC8oW14jXFwmXFw/XXsxMX0pLywgIC8vIHlvdXR1LmJlLzxpZD5cbiAgICAgICAgL1xcP3Y9KFteI1xcJlxcP117MTF9KS8sICAgICAgICAgLy8gP3Y9PGlkPlxuICAgICAgICAvXFwmdj0oW14jXFwmXFw/XXsxMX0pLywgICAgICAgICAvLyAmdj08aWQ+XG4gICAgICAgIC9lbWJlZFxcLyhbXiNcXCZcXD9dezExfSkvLCAgICAgIC8vIGVtYmVkLzxpZD5cbiAgICAgICAgL1xcL3ZcXC8oW14jXFwmXFw/XXsxMX0pLyAgICAgICAgIC8vIC92LzxpZD5cbiAgICAgIF07XG5cbiAgICAgIC8vIElmIGFueSBwYXR0ZXJuIG1hdGNoZXMsIHJldHVybiB0aGUgSURcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXR0ZXJucy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAocGF0dGVybnNbaV0udGVzdCh1cmwpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhdHRlcm5zW2ldLmV4ZWModXJsKVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5mdXp6eSkge1xuICAgICAgICAvLyBJZiB0aGF0IGZhaWxzLCBicmVhayBpdCBhcGFydCBieSBjZXJ0YWluIGNoYXJhY3RlcnMgYW5kIGxvb2sgXG4gICAgICAgIC8vIGZvciB0aGUgMTEgY2hhcmFjdGVyIGtleVxuICAgICAgICB2YXIgdG9rZW5zID0gdXJsLnNwbGl0KC9bXFwvXFwmXFw/PSNcXC5cXHNdL2cpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaWYgKC9eW14jXFwmXFw/XXsxMX0kLy50ZXN0KHRva2Vuc1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbnNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbn0pKTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdibHVlaW1wLWdhbGxlcnkvY3NzL2JsdWVpbXAtZ2FsbGVyeS5taW4uY3NzJyksIHJlcXVpcmUoJ2JsdWVpbXAtZ2FsbGVyeS9qcy9ibHVlaW1wLWdhbGxlcnktZnVsbHNjcmVlbi5qcycpLCByZXF1aXJlKCdibHVlaW1wLWdhbGxlcnkvanMvYmx1ZWltcC1nYWxsZXJ5LXZpZGVvLmpzJyksIHJlcXVpcmUoJ2JsdWVpbXAtZ2FsbGVyeS9qcy9ibHVlaW1wLWdhbGxlcnkteW91dHViZS5qcycpLCByZXF1aXJlKCdibHVlaW1wLWdhbGxlcnkvanMvYmx1ZWltcC1nYWxsZXJ5LmpzJykpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnYmx1ZWltcC1nYWxsZXJ5L2Nzcy9ibHVlaW1wLWdhbGxlcnkubWluLmNzcycsICdibHVlaW1wLWdhbGxlcnkvanMvYmx1ZWltcC1nYWxsZXJ5LWZ1bGxzY3JlZW4uanMnLCAnYmx1ZWltcC1nYWxsZXJ5L2pzL2JsdWVpbXAtZ2FsbGVyeS12aWRlby5qcycsICdibHVlaW1wLWdhbGxlcnkvanMvYmx1ZWltcC1nYWxsZXJ5LXlvdXR1YmUuanMnLCAnYmx1ZWltcC1nYWxsZXJ5L2pzL2JsdWVpbXAtZ2FsbGVyeS5qcyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLlZ1ZUdhbGxlcnkgPSBmYWN0b3J5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIGdsb2JhbC5ibHVlaW1wKSk7XG59KHRoaXMsIGZ1bmN0aW9uIChibHVlaW1wR2FsbGVyeV9taW5fY3NzLCBibHVlaW1wR2FsbGVyeUZ1bGxzY3JlZW5fanMsIGJsdWVpbXBHYWxsZXJ5VmlkZW9fanMsIGJsdWVpbXBHYWxsZXJ5WW91dHViZV9qcywgYmx1ZWltcCkgeyAndXNlIHN0cmljdCc7XG5cbiAgYmx1ZWltcCA9IGJsdWVpbXAgJiYgYmx1ZWltcC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gYmx1ZWltcFsnZGVmYXVsdCddIDogYmx1ZWltcDtcblxuICAvL1xuICB2YXIgc2NyaXB0ID0ge1xuICAgIHByb3BzOiB7XG4gICAgICBpbWFnZXM6IHtcbiAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYXJvdXNlbDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGluZGV4OiB7XG4gICAgICAgIHR5cGU6IE51bWJlclxuICAgICAgfSxcbiAgICAgIGlkOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ2JsdWVpbXAtZ2FsbGVyeSdcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbnN0YW5jZTogbnVsbFxuICAgICAgfTtcbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICBpbmRleDogZnVuY3Rpb24gaW5kZXgodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY2Fyb3VzZWwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLm9wZW4odmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy4kZW1pdCgnY2xvc2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICAgIGlmICh0aGlzLmNhcm91c2VsKSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQoKSB7XG4gICAgICBpZiAodGhpcy5pbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmluc3RhbmNlLmRlc3Ryb3lFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHR5cGVvZiBibHVlaW1wLkdhbGxlcnkgIT09ICd1bmRlZmluZWQnID8gYmx1ZWltcC5HYWxsZXJ5IDogYmx1ZWltcDtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICB0b2dnbGVDb250cm9sc09uUmV0dXJuOiBmYWxzZSxcbiAgICAgICAgICB0b2dnbGVDb250cm9sc09uU2xpZGVDbGljazogZmFsc2UsXG4gICAgICAgICAgY2xvc2VPblNsaWRlQ2xpY2s6IGZhbHNlLFxuICAgICAgICAgIGNhcm91c2VsOiB0aGlzLmNhcm91c2VsLFxuICAgICAgICAgIGNvbnRhaW5lcjogXCIjXCIuY29uY2F0KHRoaXMuaWQpLFxuICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICBvbm9wZW46IGZ1bmN0aW9uIG9ub3BlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kZW1pdCgnb25vcGVuJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbm9wZW5lZDogZnVuY3Rpb24gb25vcGVuZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVtaXQoJ29ub3BlbmVkJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbnNsaWRlOiB0aGlzLm9uU2xpZGVDdXN0b20sXG4gICAgICAgICAgb25zbGlkZWVuZDogZnVuY3Rpb24gb25zbGlkZWVuZChpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kZW1pdCgnb25zbGlkZWVuZCcsIHtcbiAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICBzbGlkZTogc2xpZGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25zbGlkZWNvbXBsZXRlOiBmdW5jdGlvbiBvbnNsaWRlY29tcGxldGUoaW5kZXgsIHNsaWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVtaXQoJ29uc2xpZGVjb21wbGV0ZScsIHtcbiAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICBzbGlkZTogc2xpZGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25jbG9zZTogZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kZW1pdCgnY2xvc2UnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uY2xvc2VkOiBmdW5jdGlvbiBvbmNsb3NlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kZW1pdCgnb25jbG9zZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2Fyb3VzZWwpIHtcbiAgICAgICAgICBvcHRpb25zLmNvbnRhaW5lciA9IHRoaXMuJGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlKHRoaXMuaW1hZ2VzLCBvcHRpb25zKTtcbiAgICAgIH0sXG4gICAgICBvblNsaWRlQ3VzdG9tOiBmdW5jdGlvbiBvblNsaWRlQ3VzdG9tKGluZGV4LCBzbGlkZSkge1xuICAgICAgICB0aGlzLiRlbWl0KCdvbnNsaWRlJywge1xuICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICBzbGlkZTogc2xpZGVcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpbWFnZSA9IHRoaXMuaW1hZ2VzW2luZGV4XTtcblxuICAgICAgICBpZiAoaW1hZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciB0ZXh0ID0gaW1hZ2UuZGVzY3JpcHRpb247XG4gICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmluc3RhbmNlLmNvbnRhaW5lci5maW5kKCcuZGVzY3JpcHRpb24nKTtcblxuICAgICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgICBub2RlLmVtcHR5KCk7XG4gICAgICAgICAgICBub2RlWzBdLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50KHRlbXBsYXRlLCBzdHlsZSwgc2NyaXB0LCBzY29wZUlkLCBpc0Z1bmN0aW9uYWxUZW1wbGF0ZSwgbW9kdWxlSWRlbnRpZmllclxuICAvKiBzZXJ2ZXIgb25seSAqL1xuICAsIHNoYWRvd01vZGUsIGNyZWF0ZUluamVjdG9yLCBjcmVhdGVJbmplY3RvclNTUiwgY3JlYXRlSW5qZWN0b3JTaGFkb3cpIHtcbiAgICBpZiAodHlwZW9mIHNoYWRvd01vZGUgIT09ICdib29sZWFuJykge1xuICAgICAgY3JlYXRlSW5qZWN0b3JTU1IgPSBjcmVhdGVJbmplY3RvcjtcbiAgICAgIGNyZWF0ZUluamVjdG9yID0gc2hhZG93TW9kZTtcbiAgICAgIHNoYWRvd01vZGUgPSBmYWxzZTtcbiAgICB9IC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3AuXG5cblxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdCA9PT0gJ2Z1bmN0aW9uJyA/IHNjcmlwdC5vcHRpb25zIDogc2NyaXB0OyAvLyByZW5kZXIgZnVuY3Rpb25zXG5cbiAgICBpZiAodGVtcGxhdGUgJiYgdGVtcGxhdGUucmVuZGVyKSB7XG4gICAgICBvcHRpb25zLnJlbmRlciA9IHRlbXBsYXRlLnJlbmRlcjtcbiAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gdGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlOyAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgICAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gc2NvcGVkSWRcblxuXG4gICAgaWYgKHNjb3BlSWQpIHtcbiAgICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkO1xuICAgIH1cblxuICAgIHZhciBob29rO1xuXG4gICAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHtcbiAgICAgIC8vIHNlcnZlciBidWlsZFxuICAgICAgaG9vayA9IGZ1bmN0aW9uIGhvb2soY29udGV4dCkge1xuICAgICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0OyAvLyBmdW5jdGlvbmFsXG4gICAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuXG4gICAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfXztcbiAgICAgICAgfSAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuXG5cbiAgICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3RvclNTUihjb250ZXh0KSk7XG4gICAgICAgIH0gLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcmVuY2VcblxuXG4gICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcblxuXG4gICAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2s7XG4gICAgfSBlbHNlIGlmIChzdHlsZSkge1xuICAgICAgaG9vayA9IHNoYWRvd01vZGUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0eWxlLmNhbGwodGhpcywgY3JlYXRlSW5qZWN0b3JTaGFkb3codGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSk7XG4gICAgICB9IDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3Rvcihjb250ZXh0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChob29rKSB7XG4gICAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcblxuICAgICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbihoLCBjb250ZXh0KSB7XG4gICAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpO1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlO1xuICAgICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKSA6IFtob29rXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2NyaXB0O1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZUNvbXBvbmVudF8xID0gbm9ybWFsaXplQ29tcG9uZW50O1xuXG4gIHZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXFxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkLCBzdHlsZSkge1xuICAgICAgcmV0dXJuIGFkZFN0eWxlKGlkLCBzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBIRUFEID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGVzID0ge307XG5cbiAgZnVuY3Rpb24gYWRkU3R5bGUoaWQsIGNzcykge1xuICAgIHZhciBncm91cCA9IGlzT2xkSUUgPyBjc3MubWVkaWEgfHwgJ2RlZmF1bHQnIDogaWQ7XG4gICAgdmFyIHN0eWxlID0gc3R5bGVzW2dyb3VwXSB8fCAoc3R5bGVzW2dyb3VwXSA9IHtcbiAgICAgIGlkczogbmV3IFNldCgpLFxuICAgICAgc3R5bGVzOiBbXVxuICAgIH0pO1xuXG4gICAgaWYgKCFzdHlsZS5pZHMuaGFzKGlkKSkge1xuICAgICAgc3R5bGUuaWRzLmFkZChpZCk7XG4gICAgICB2YXIgY29kZSA9IGNzcy5zb3VyY2U7XG5cbiAgICAgIGlmIChjc3MubWFwKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgICAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgICAgIGNvZGUgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIGNzcy5tYXAuc291cmNlc1swXSArICcgKi8nOyAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXG4gICAgICAgIGNvZGUgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzcy5tYXApKSkpICsgJyAqLyc7XG4gICAgICB9XG5cbiAgICAgIGlmICghc3R5bGUuZWxlbWVudCkge1xuICAgICAgICBzdHlsZS5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUuZWxlbWVudC50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgaWYgKGNzcy5tZWRpYSkgc3R5bGUuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgY3NzLm1lZGlhKTtcbiAgICAgICAgSEVBRC5hcHBlbmRDaGlsZChzdHlsZS5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCdzdHlsZVNoZWV0JyBpbiBzdHlsZS5lbGVtZW50KSB7XG4gICAgICAgIHN0eWxlLnN0eWxlcy5wdXNoKGNvZGUpO1xuICAgICAgICBzdHlsZS5lbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHN0eWxlLnN0eWxlcy5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW5kZXggPSBzdHlsZS5pZHMuc2l6ZSAtIDE7XG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvZGUpO1xuICAgICAgICB2YXIgbm9kZXMgPSBzdHlsZS5lbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgICAgIGlmIChub2Rlc1tpbmRleF0pIHN0eWxlLmVsZW1lbnQucmVtb3ZlQ2hpbGQobm9kZXNbaW5kZXhdKTtcbiAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCkgc3R5bGUuZWxlbWVudC5pbnNlcnRCZWZvcmUodGV4dE5vZGUsIG5vZGVzW2luZGV4XSk7ZWxzZSBzdHlsZS5lbGVtZW50LmFwcGVuZENoaWxkKHRleHROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgYnJvd3NlciA9IGNyZWF0ZUluamVjdG9yO1xuXG4gIC8qIHNjcmlwdCAqL1xuICBjb25zdCBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcblxuICAvKiB0ZW1wbGF0ZSAqL1xuICB2YXIgX192dWVfcmVuZGVyX18gPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImJsdWVpbXAtZ2FsbGVyeSBibHVlaW1wLWdhbGxlcnktY29udHJvbHNcIixjbGFzczp7J2JsdWVpbXAtZ2FsbGVyeS1jYXJvdXNlbCc6IF92bS5jYXJvdXNlbH0sYXR0cnM6e1wiaWRcIjpfdm0uaWR9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic2xpZGVzXCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdoMycse3N0YXRpY0NsYXNzOlwidGl0bGVcIn0pLF92bS5fdihcIiBcIiksX2MoJ3AnLHtzdGF0aWNDbGFzczpcImRlc2NyaXB0aW9uXCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJwcmV2XCJ9LFtfdm0uX3QoXCJwcmV2XCIsW192bS5fdihcIuKAuVwiKV0pXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJuZXh0XCJ9LFtfdm0uX3QoXCJuZXh0XCIsW192bS5fdihcIuKAulwiKV0pXSwyKSxfdm0uX3YoXCIgXCIpLCghX3ZtLmNhcm91c2VsKT9fYygnYScse3N0YXRpY0NsYXNzOlwiY2xvc2VcIn0sW192bS5fdChcImNsb3NlXCIsW192bS5fdihcIsOXXCIpXSldLDIpOl92bS5fZSgpLF92bS5fdihcIiBcIiksKCFfdm0uY2Fyb3VzZWwpP19jKCdvbCcse3N0YXRpY0NsYXNzOlwiaW5kaWNhdG9yXCJ9KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0uY2Fyb3VzZWwpP19jKCdhJyx7c3RhdGljQ2xhc3M6XCJwbGF5LXBhdXNlXCJ9KTpfdm0uX2UoKV0pfTtcbiAgdmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG5cbiAgICAvKiBzdHlsZSAqL1xuICAgIGNvbnN0IF9fdnVlX2luamVjdF9zdHlsZXNfXyA9IGZ1bmN0aW9uIChpbmplY3QpIHtcbiAgICAgIGlmICghaW5qZWN0KSByZXR1cm5cbiAgICAgIGluamVjdChcImRhdGEtdi02ZDIwMzNiYV8wXCIsIHsgc291cmNlOiBcIi5ibHVlaW1wLWdhbGxlcnk+LmRlc2NyaXB0aW9ue3Bvc2l0aW9uOmFic29sdXRlO3RvcDozMHB4O2xlZnQ6MTVweDtjb2xvcjojZmZmO2Rpc3BsYXk6bm9uZX0uYmx1ZWltcC1nYWxsZXJ5LWNvbnRyb2xzPi5kZXNjcmlwdGlvbntkaXNwbGF5OmJsb2NrfVwiLCBtYXA6IHVuZGVmaW5lZCwgbWVkaWE6IHVuZGVmaW5lZCB9KTtcblxuICAgIH07XG4gICAgLyogc2NvcGVkICovXG4gICAgY29uc3QgX192dWVfc2NvcGVfaWRfXyA9IHVuZGVmaW5lZDtcbiAgICAvKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuICAgIGNvbnN0IF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4gICAgLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuICAgIGNvbnN0IF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyA9IGZhbHNlO1xuICAgIC8qIHN0eWxlIGluamVjdCBTU1IgKi9cbiAgICBcblxuICAgIFxuICAgIHZhciBWdWVHYWxsZXJ5ID0gbm9ybWFsaXplQ29tcG9uZW50XzEoXG4gICAgICB7IHJlbmRlcjogX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18gfSxcbiAgICAgIF9fdnVlX2luamVjdF9zdHlsZXNfXyxcbiAgICAgIF9fdnVlX3NjcmlwdF9fLFxuICAgICAgX192dWVfc2NvcGVfaWRfXyxcbiAgICAgIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyxcbiAgICAgIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18sXG4gICAgICBicm93c2VyLFxuICAgICAgdW5kZWZpbmVkXG4gICAgKTtcblxuICByZXR1cm4gVnVlR2FsbGVyeTtcblxufSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9